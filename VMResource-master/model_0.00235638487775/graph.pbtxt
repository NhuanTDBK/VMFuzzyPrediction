node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
          dim {
            size: 120
          }
        }
        tensor_content: "-\367\341\272\201_\022>\224\240Y=\313U\215<\031%\215\275\367t\035;\342\362\026>t\254\327=oy\216=\351T\037>\027,\237=!\346\033=\t\345\345={\241\r>\315\354j\275\025\210\014>n\306\366=&\254\'>t\315\017=\367\001(\276\331\3528>\221\351\036\276E\262\272\2757\214\221\275\261\263\320=\320\263\263\275\276\367\261\275p\031\030\275-W`;\267zZ=\372\031\306\275\354\006k=>V\001=?\217/>\304\334\336\275<\020W=N\036\025\275m\270%>l\220\275\275\304J\307\275\257\223\001>\021\221\310=\261\354\234=\275\344\344\274YY:>\353Ob=\252j\352=\275\3179\275y\247\252\275\207\344@=B\225\347\275-\374\320\274\376o\030\275\202\024\031>\3354+=\004H >\003$\213\275\007\311\025>\177\347\264=Y.\000=q\325\371=\314\321\366=\264\034\020>\323!\371\275\'c\001\276@r\035>[m\317=\334wE\275\336];\276\265y\201=_\223\341\275\344\037=\276S\0301>V\364$\276(F\026\275cc\323<B\3738>3\207*=\260\371\004>jd\245<K{\327=\010\334\347<CE\037\274>\021\227\2746\324/>\316\350Q=\031\251Y;\010u\347\275[\033.\274\235\317\202=\031H\342=\356\252\256=T\213\242\274\272\334b;\004\000\270\275)\243\264\274\251\215m<\266|\367\274\037P\204\275\363\353\367=`\303/=3H\227\275\003\333\357\275\347\363\204\275\375\305\017<\031 \362=}\202\240\274\311\212\261\275?Y<\276\007U\317=\330\243\021\275\026\374\003\276p\320<>|6\370\275s`f=3\275\025\275\313\366\006\276\033\256\267\274\334\005\243<\235W\307<;[\353\275\364\"\014>\373\t\276\275\331u%<\313\302\323<\032$\'>W\233\034>G2)\276\017\311L\275\221;\217\274\027A\022=h\243K\275oC\323\275\222\220\002>\232\335\276\275\344\010\263\275}n\030<\014\260\026=pc\t=\303\272->\016\335\034\275\t.\211=- \371\275\333\215/\276Q\271\362\275Lv/>v\315\373<\003%5\276>l,=c\213\302\275\377\344*\276\317\306\373\275\200\005=\276\345f#;z7q\275\344.\233\275:.9>\360y\003>>\310\362=\321\274\211\275\253!E\275\"\0338\276\211d3>\303(%=\367%\271=&\226v=\257\357\326<Y<\201\275\320\342\342\275^[\242\274\013\230-\275\211\211B=\003\231\263\275\221\316\274\275\035\273w=\rH\276\2754\325=>\020)G=\226\351\237;\324\001\032\275*.\022\276t\253\272=f\227D\2731\264\273=\314\2113\276\356\325$\274*\346\323=\267\342\030\276w\004?>\341=\224=\340\010u=\206\240\034\275\231\003\220=\317M\271\2756@\370=\245\300<>\373\367\363=\267w>>\337\317\330\275\244XH\274\034\2649>O\273a=oX0>f\022\232\275\367u\202=r\307\270\275\310\005\020\276\224\311\222<\010\026\013=\324\331\027\276\370\251\025<-27>\210#\247\274\013i\247=\371\325\227=\367\200\002\276\032\035\224\275d\366\005>\361\t\250<\332\235\036\276#\236\032>\363\270=>\305\177\245\274\0305\344\275\2054\300\274\004M\313\275W,1>\253\2465>[HS\274\2455\335=\266\007\234\275{4O=\303\366\353\275\375\024\027\276U\270\t>\301\277\030>\331\264|\273mp\002>E\362\256<\373\216\254=.Dp\2756\371\366=\375\014\312=8\343\337<Y\311\032\275M\354 =lw\365=I\342\260=\237\3723>\030\242;\276\247\250;\276\202\252S\275X\365*>\342\016:>9\230\002>W\343\312=\333hK\275T\241!>n\306\336\273\263K\221\275\216,\217=9\326\027>\361J\314\275\204\371?>\225\022^\275\370\231+>\223j,>\022\200\'\276\316=\250=\313Z6=\253\343u\275\215<{\275\200{,\276\214)\364=\344\020W\275u\000\360=f\245A\276\306\027\017\275\006\316\335\275\207\366\025>\224\313\017>\365\311\256=!$\234;\277\366\252=<\364\324\275\033\"K=\340\342\366=Q3\266\274\300]\230<\253.\247=dG\230=\205\273\333\275/\003\241=\2157\r=\210O\036>\276\0278>\267>\265;\334\002\354\275ej`\273\224\206\250;Jx/>b\217\263=\2501\036\2763\n\232\275\314.\263=\243\000\373\274\0035z<\257\010=>\255\357\025>\020\362\020=\277Jt\275\013\373\271\2759\354?\273\000\352\253=E\001\321\275*\016t<\322\254\224\274\232F\223=\341 \277<UA\366<\310A,>\343\'3>\332T\272==\372L=B\351k\275\356P\371\275I#7\274\035\240\t\276\006\214\322<\216\370~\275\375x\024>\221\357[=\277l\364\273Xv\030\275\004\314:\276\023\365\363\274\317\254\r>j\235\010\276F\306c=#W\t>\212[\r>t\003\240=Uf\314<^\340\251\275\354\300:\275y\232\005\276\233\351\224\275\233\024\264\275R\253\367\275)2\242=\312\300A>\247C\375\275B\367-=\004\004\377=\242\327\274<V\223\222\275[sa\275\221\004\211=L\206h\273\035\240\037\275\247K\243<\376\376\002\276\005k=>\211\030B>\262\242\247=N\210\325=h\360\">\201I\222\275\352\262\237=\023\202a\274R\372\331<\322i\233=\313\021\023=l\240\355<\025\370,\276\314\245\213=\273j\305\275\177*%>\010^\345=L\250\032\276\"\001\211\275\220\355\267\274\\@\001>D\362b\273J\302\353\274\210\271\203\275\213v\251\274\310\261\207\275\255\237*\276\007<\217=\331\t\030\276\323v\035=\2365>\276I.=>_\006#=\024l\267\275r\030:\276:\337@\276\272\3759\276R\241\031=\275\272\231=\344m\363<\331\367@\275x=\346<\302\220\265=;\313\357:\"x\207\274l\225\027\276\355\347\322\274s\000\332=\203{\026\276\327\035\277\275\002\2066\276{\216\017=\277\'\343=b\210\n\276\332\2222\275)\t\255<\366\202\'\276R\355\373\274\n\275\253\275\202\301\\=\251^\262=\361\334(>\026\r\257\275\372<\303\275\221\213\224\2755\016\206\275$\304\263\275\233\024\326\274\205J\306\270\314\361\n=\312\302\004>\317\310\213\275\010\177s<z\250!>\177E4>\316h\002>\313cD=\033/\360\275\376\230\277=\240\202i\275=\371<=x\346\327=t\334\263\275\007\316\355=\004\263\200\275/\324\010>\214=6\276\207\367\351\275X\377\206=`r\035\275D\266\330=@w\014\276G\377\034\276\265\266\263\274&*S\275\343$\257=\004[\027=\333\373\320=\265\356*\275\301\020\312\275\261\372+\275\3677\335\275-[G\275N\256\022=\360`#>Y\007\005\276}_\201\274\221\347\023=\253\r\300\273\337\265\246\275\356l.=\372\352<>\323\2122>\305\256+\276\355H\345=\314\251\255<\021\220\000\276\024\354\367\275dH\234=\321\255*\276\356\201Z\274`\177O\275\206\352\346=Pk >_h&\276\036)&>0\376\302=\252\027\t\276\014C\324=\026\301\224=9\341\026=R1\331<n\025\254\275\253\314\017>\206\213\333\275 \014\2149\022i\274\275\366\222;>U\347\227=\0370\362=\017\273\227\275.\264\r=2p\002\276P\377\255=\344\222\212=&r\023>\004J;>\"\305\311=\375D2=\230\351\363\275an\277<7\234\361\273\253\0160>\360\366\272\275\374cZ\275\367u\315=$\022\206=3\317\327\275\221\356\013\275t\232\235\275\356\254\376=|\206\371=\307\204A\276\357~\'\276f\316\367\275e\003e\275>K$>\013\032\037\276\311\000\270<B\326\013\275:Z\303\2756\2024=+\231\377\275\\Y\231\275\324n4>\357f<\276\264\372\241\275\334\r\211=C\372\022=\216\304\214=\006\310\217\274\352\321\014>u\016$<S\200\340=\005\026\275\275\236\256!\276Vbl\274/\373\314=g\007\250\274\316\315\250=\237G\262\275K\021\261=\363\252=>\270\357\206\275\343\022K\274\001\321\'\275s}\275;\\\303-\275\336Z,\276\332\030\230\275:\023\377=\334\271\227\275\273\351]\275\223Q.\276\264\254`\274\221\224\217=q\352\336\275\035\237\023>\325\2722=l\225\266\275n\212\342<\227\333(\275fR\224=u\023\332\275\332\3715>\177^w\275\t[?>I\350i=\301\321\263=s\342p\274\256\362\3319\276\246L=\031\n\023\276\320l\353=\224\034\205<\356^\304\275\000J\214<\377b\037\276q\242\375=\010\007;>\023E\217=\325S\037>X|;\275I\031\261\275A\254\032\276Kv\354\275\302\016\346<+\202]\275P\364\010<j\032\377=\312z\027\276\320f\347\275\254\\\313=\006\323$\276\370:\261\275#\026\244\275\310Wf=\250\214\214=\314!\232\274\223\010\207=\345\265\207=\207\025;>\254\362\314=\340\207\000\276<\226\023\276O\2374\274\002,U=\263\227\371=\365\250J=d\275\202=K\350\336=w\336+\274\223\316\300\274\006\277\031=\001\3251>\335\3214\274\347;9>\245g\236\274\262\243\252\275\222\005-\275\377l+>\303\242\035\275\362\263\354=\246E\027\275\370\030\236\275J\317 =\223\240\361=\363\320$\276\204\334\031\276\335WL<qW\000\275\220\302\326=\333\274\237<@\005\025\276\314\207\034\272\003\217\307<\371@i<\353\325\307\275\020\271\025>\364P\202\275\357\335\205\275Z\266~\275\014\200\035>W4\351=\226f\021\276\016\026\345\274\235\347;\276\346\364\001\276\331\"\022\276\023#\034>+z\375=\332\233\355\275\"\263z\275\324\365:>\303\275%>\210\233\345=\266\347\026\276\325\327\032\276(-\307\274\310\3712=\376 \301=\350\337\016\276\251\275r\275\222\256\002\276\3476\035>Z\025\003\276\036\253\374\275\244\271\260=J\330;=_\324\r\274+\255@\276J\254\304\275ZfO\275\003\002\360<C\250\t9h\201e<\270\221h=I\221\t\2763\273i\275xT\017\276k\212\312=\345\366\013>5\221\000\275\255;b\275\20599>\014WW\275\231\351\024\275A\036\026=\016\254C\275\237\005\033\276C\333\004>\3038\214\275\301\2243\276^\252\223\275;)\334<\276\311\305=\3141\005\276\023\273\253<N\325\033>\027\3304\276\354+_\275\244\010\025>m\350\014\275\310\3417\2766\251\344\275\365s\022>\221y\255<hZ\305=(\304(\276<R:\276b\260\215=\260jV\275t\2100\275\337\352&>?\006\035\276\260\334j<\322\275\t>5\265m\275\366{\022\275\3778;>\206\t\205\275V\231\204<\267W\000>\246\262->#v\031\275_Y/>\376p\332=d\376\277\274\035R\004\276(\332#>\277K#=\'\233\243=Q.\332=\215\354\022\276\336b;\276\250\251\250=\000\r\220\275g\213\032>4\rA=/\016\034\276\006\352+\276\374\330\004>\377B_\273\362L/>\346=\252\274\327\240\222=$~\246\275_x\357=p\037Q=*gy=\350R\027\276\"\220\204={\344\013>{I\225\275V[\257=S\314\275<L\035\":\206d\026\276\245,)\276\035>\262;\364\226\006\274\350G\321=\333\035\331=|\310\000\276\340$\372\275\337\037\001\276\034$\021>\206\217\241=pm\303\275\321\3317;\020\230)\276V-\022\276\324\036\327\274Ah\r\276 \375\356\275b\232@>\204\362\336=j\363w=\232\2342\276\365{\270\275\270\337\027<@\212\360=q\347\246\274#\343.>z:3>=qO<\320 l\275\310\210\316=c#\024\27630\025>\021.>>\301\344\207\275\271vA\276\010\"\030>^\322\332\2744H\r\276\246\036@\276\231\237\">$\332\036>\361,\351\273x\266F</O\337=\020`\256:\233\010\371=r\032\360<B*\023\276p,5<g\211&>f\262\373\275k\351\001=\253B\224\275\177\300\010>\207\366\206=V\215\225\275\357\305\212<s\007\201=#\341\205<?\234->Y>g:\262\016\002\276\027\341\206\275\\.\034=<\272\241<\316|T=\002\265\251=c-A>|7I\275\022\004J=%\022\305\275y\251\361\2755\214\021\276\362\247\335=\326\247\2468\307\211k=\347\033\361=\305R\300\275\003\307\360=n\325\221\275\254\362\244=7\013B\276\36558\276\250o?>\363\232\352\275\257\362k\275\360\342\020\276\031\\\246=\217q+>?\201\321=\201\014)>\352\217\271\275\240\252\003>\311\374\030>\032J\351\275HP\327\275b\364\233\275\036\307\026\275\365\244\">\324\246\310=S\214+>`\004\264\275&\234M\275ia\346=\3417\027\275+\t\026>U+\010>7\013\277\272&\216\244\275B\001\211\275q\302\'>\364\031\013\276\345l@\276\257^\022\276\244\210\237=#{\347\275}W,>TY\014>QQ1\275S\032\243\275\231w(>-\000\'\276A\214\004\275\014\350\034>\022\322\335\274\321&(\274(\023\301<]\373\005>\226\3462\276\215\246\014>\227\271\342=G\326\035\276\370\263\002>\263\233\">\356\276\220\275\377\262\246\275\326\335\347=[\352\264\275\220\324\361=1o\002>\352\356A=!\035\262\274\t`\323\275\235\'\020>y\271u\275\233\342\376\275}\361\253=%\217\234\275\312\005\342;8%\344<\362\327 >d\373\276\274\327\276\'\2764\374\347=\032\275\246\275\334\2548>\'\237w<\341\264\377=U\013\334<\305\227$\275\215R\214=\372\344\002\276\247\260\233\275\301N6>\232\266\024>\337Q0\275m\327\245=\225\'\325\274\231\242\016>h\201\331\275d\245\320<\211\026\226\275\324\205*>\237H\023\276C\254\355\275r\352$\275\266\\/\276X\350\005\2761\274)\276\265\246\r>p\022h\275\3677.>m\324\002>\'\375\220=\361k\200=k\3030\275\367\255\010=W\256\325=\211\335\023<\331\311\005=\321(\371<=C\257=I\200\260\275\275\242\366=\354#\244=\320-\274\275\254p\376\275C\366m\275\327\004\267\275=\276\302=\010t\006\276\224&\270=\245v\241=\312\345\375=\332F\022<& \354\275\rwg=\377\315+>\274b\306\275@\303$\276\211\016/\275\343\014\334=cP\016\276\343\037\313=a\002\376=\231\026<>\000\224!>s\303M=\251}=\276\356\224\321=\330\366\347\275\324\375a\274\t\363\025>\271d3>w\277\327\275r\212,>{\275\221\275;\224\034\276\035|\335\275\332\t\372=x\322@>X*\005\276\001K\n\276[v\247=\203\025\375<6\021\351\275\207\241\254\275\273s\230<\353s\257=\253\360\372=\233\302\340=0\331?=v\342\261\273\243\240\250\275:\2463\276\023\251\265\275+!\374\275\226o\333=\"\355\204\275#\264#\275Dn\206=\375\235\001\276\355\227\210<\243\323.>\203\210\005\276\217#\003>]\304$\276\262\265\335\275\325#\006>1\232\003>fA\356\275y5=>>\362\300<\367U\202\275L\342\353<\217\355\302==n\027=\254\303\'\276\027\324\032>\360/~=\024\010j<\234F\350;\327\253\353=|\335\024\276\210V\303<\031\261@\276\301\345\005\276Ig\013>[\216!\276:\003\013\275\231q\t\276\322\225\330\274\260\251\376<\356c\002\276+=M\275\000\220\n=\\\207\002>\356\371\361\274\277N\341=\204\261\235=\034\255\006;\027\315=\276\004\343\t>\005\273\253:#m\321\273\337\317\354=\275\275\256\275\023\220\025\275>\247\371=UNA\276\361\373\274=\344\370\037=\361\277\004>\246%\017\274h\010\007;\014\017\340\275:!\016>\341O\227\272x\336\346=\250\243\221\275\345M)<\303\000\242=>\002@\276\274A-\276\231\320!\276\267\007\362=\0239e=\222\262#\276\0226\357\275\263\237\025\276\332\277\307=m\364;>\274\333\342\275\345v\271=\232d.\276\306\260\005\276D\023q;\303~\340\275\377\214\\\274\315\220\031\276\230\005\264=M\215\027=w\347\270\275\324!\'\276v\251\025\276j\232<>4@\177\274/q\023>#\272\r=\200\006\270\275C\226\000\275\302^\034\276(\000\303\274\323B\267\273\006\267\227\275\n\204\035\276\321\314S\274\3239\242\274U\207\025=5k\277=>\345?\2765\333\027>\304\'\271=\254\233(\276/\351\020\276\254\336\000\276R\2523>\036N\221\274\010{\245\274\344\340\257=a{h\275\262\230\r>2d0\276\332)\">K\2223>7\373\017\276\3403\n\276W\372\307=\"v\345\275\342\307\366=J\3568=\352o\365\275\334y\372=%_9\275Z\333r=Sg\327=5\024\030>\250\207\325\273\224\032]<US?=\n6\031>\213\340\371\275\202B\230\275\003\332k=\252~\204\275=L\332=\311^*>\2471\212=\257\337\335=:\305\202=SX\032\276\222\354\373=\213F\254==\330\333\275\227v\363\2750\373->\342B\000>\3712N=(\226\267=\203\320\030;WA\033=\277\3116>\350\237\246<\247N/>8\306V\275UF\347\274\313L\022\275X\230\370=\005=\210<{\022p=4s\361<\221\2502=g\362<>?\3317\276\256/$>\234\274\014>Jk\343=\\\'=>\221\226\274=\237\202\030>\253\242\017>\233\250\271\275\036\010\322=\205\242Z=\226\002v\274\212\nl<\330-\014\276&\223\034\275JCc=\334\037\251\275\023\276\315<\3751\224=A\331\036\276\361\344\345=9\016\303\275i\2004>\021N\265<\275\345\317\275\254/\205\275\360\240\014\276D\336q=\304%_=\330\245\206\275\030e\347\274a\017\220\275\374:\277=7\273\247\275\250\022\"\276\356\301@\276\243\007?\276wJ\006\276\274\260\355\275\261\326\030\276\374\342\211\275\r\030\267\275\005U+>\355J\232=P\307\035>k\267\020\276\372\032\031=\322\202\036>\004o\206<`\311|\275\264k1>\244F\337;\221\221\311==\035%\275\034~{=\352\376.>\234\034\251\275\274\261\321=\206\254\340\275T:\026\276\376*!\276\n\376\264\275\006\265\353\2752\222!>\333\330\215=\3206\n\276\200%\r\276\212\177l\275\037\\\334\271\343\252\016\276\216\351\233;j\'\210=\235e@\276\004\370\206=\002\365\316\275\271\274\375=\264\323\276=\353+\202<\031,\330\274\036\242;>\357Q\365=\346O\206=\351p\262<\252\332\374<\006\206\220;\245\247\241={\2244>a\352\325=\362-\215=\266\3174<\267\237\226\275\034D\351\275\221\034\226;Fo\034\276\234\275\214;\352\020\367<8\r\032:\224\206&=\224Z\005=\250\004o=\013\240/>\021\344\305\275\311k\207\275\354\252\362=L\356\022>\370E\306=\341}\301\274\030A\013\276\243\217\224=\255\311\267\275\356\322\031\276O\240\361=d\341\250=\004\225\002>\242\347/\276\265Q]=\367\230\007\276\035\312:\276e\2605>H\313P\275t\370\301\274\257Z\255<<\331\333\274\3263<\275b+\222\274\365\273\222=\022\337\222=\035|\236\275\3148=>\3622\326\274~\346\271\274VB\354\275k(\346\275\205\201\000<\240@\301=\217*\265=J\032\272\275\177\373\312\274\n[\265=j\341r=i\2249>\334&\224=(\3433>\246\035\013>\250^\321=\363\377\030\276\222\0176>\032\0202>\222a\035>9\331\212=C\274L\275\307\250\n\275X\316\207=\277\036P;\341\345\354=\007\250\252\275\025\356\363=W\315\367\275m\351#>r\000\332=\237\201\241<J\325\021\276c[\037\276\214u\245\275\322\"4>\r\357\213=\230\021\251\275\316\022 \276\303\016-\276\267!\365<W\342\022\274\271\244+>Z7\272\275\214\337\002>\250\361\030\276a\263\023\276\342\214k<|N\265=\372r\313\274@\252\246\275\323\025\250\275\221\274\003>\342\006\330=]\312!<M\0330<\373\3267>5\370?=&z1\2760\3353>\277\177\n\275t\2504\276\323\n\261\274\240,@>z9\017\275\213\352\202=\336\374\324=\367\313i\275\233\257\001;\272\351\001=\363\216U=\345\002@>wV>\276\244\'\327=:S\002\276Z(\233=9<=\276\215\221\326=\327Q\"\270!\006\\\275b\ng=\323m\237\275\306@A\274\"\350\206\275?\343\273\273W?h\275c\205\364=\203\2366\276D-\305=\225S\n\276\366\270,=%\234\205<\326x\010\275\320\253\033\276\306:\204;bp0>$\222\027\276\264\245@>\3109\336\274l&\356\275\021\347 >1\221\367=\374\344y=\024\3203\276\345QF\275\313\2227<\3253\343\275\030\204\331;\021c;\276\227A\354=w\242{\275*\001\365\275\215v\021\276il\245=\300_\222\275\345P\332=\220.2>\375h\343\275\374\r\010=\t\376$>\265\3019=\210\261\302\275\301\320\'\275$\312\013>\240\337\344=\346 \342\273Gc\000\275p\374\354\275\022#$=e\343\271\275\326\331\033>=\365u=zm+=\247\266\230\274\314\004\031>\314\260\232=\316N$\276\014\210\023>#p\030=\221\243p\275\310.\004\276\\\306\341\275\345\n8\276\350\207\372\275T\344\247\274\277>9\276!\232\023\276\247\3777>\244\'$>c\274\360=\331\334\330=C\322\274=b\004\212=\321\022\315=ck\025>\364\302\005\276Wj\004>I\216\363<HM\t\276\030\263\371=/\324\001\275n\342\204=C\272:\276sI\332=\252\003\'>\313\032*\276\261\265\026>\014\242\317=\210\276\373=\263*\273\275\237\335\010\276\367Gx<\244<<>\227\"\230=h\341\'\276 \0021\276a\200\021\276\322\255\273\274\014\204\231<6.y\275\350\224`\275\035\203\000=\266\354\003\276\363\002\264\274\217\264\243=5\276(\276\325\324\016\275V\323?\276\321\2238\275H\256\344\275\327\017\234\275\240\245\365\275\365\361@<\303d\253\275\210\201\016>\010\202\">\331d\321=tW6=\367|\244=yi\3058\'\221(=\367\307v<~=\372<\336p\'>\346|\226=\302\034\252<\020\275\361<\246,\003=\251\377\026\276\215m\r\276\226\300\242=\367\237=>\377\320n\274{L&\276\217(\260\275\\\013G=\262u\037=\023<\260=\234O\256=\037\356\356<\214 :=\317\334K\275\217\254\001>\037[\034\274\203W@>\307#\005\276>\222+>\032\006d=\215\377\234=\301\233\025=^\n\027>\322\002\223\275p)\231<r;\201\275\207x\330\275\303\005\330=\'5.\276\320v\263\275uO\240=2\263\241\275A\0219>qn\007\274\n\206\242<i\033*>,\256X\275\336@<\275Zp0>\303\014\023\275\275d\341<\204,\327\275?\032\246=\013\240\236<\253\224~\275\217\263\213=\305\002\035\276p\360\226\274\346\266^\275i}\027\276\205\310(> \007\336\275\373\257\340=!\354\243=\316\345\036>\366\367\251\274\200\317\034\275\030 \271=\023\351\361\275\316\300\027=\222\020\003\276\177\010(>^\236\333=\277\336\013>1\343.=\314~p=\0248\311\273\026?/\270\310|\222\275\016\300\316\275\363\332\325=o\241\017>\370\337\333=\354\375Q\275K\004\033\276\222h^\274x\271\300\274e\330\016\276\332K0\276\023`\303\2751\205o\275G\316\255\275\241\352\203=\214OA>\276\264\034>\262C\355<>p:=`\201L=\363\345|<@=(=]\373->]Y\214=\353X:>\3704\006\275\034\345K=\270\241!\276/\004\371=I\302\315=M\n\037\276P\352a\275\203X\330=85\366\275d\306\254\275*\013L=\213e\263\274\032\021\003\275\315u\006\275\t\177@=e\372\243=0\256\016>i\3109\275\217\235(>RV\035>\235\016\244\275\031\303\270=q\313\252\275j\245,>|\020\204;=\246\325\275\030t\370;g\252\024>k\027\214\275\352\305\210=\360\345\302\273\301\321\250=\3758~=l\022\256\274\330@&\275\260\254\373\275G&\240\275\261\3270>E\314\212\275\005g\363\2754\303->\027\347+=g\336\'\276\251\275\005\276\025\275+\276\177\265\013;\014\030\261=hvi\275 \277@\276\372#\000\276\2743\337\271A\202@\276\021\231\010=\356\210\314\275\201\246\r\274\337\205\">gJ\343\274\317\373:\276\037,@\275t\353\365=\357\3249\276\t\365\023>\335Ay\275CD?\275.\265;>\236\221\252\275\031jZ=u\0014\276)\232\003<,\035\007\276!\002\025\276ie\002\275\013\370\265=0\217\367=]|D\274\264(3=\372P=\276*\352\312\275\272h\367\275\210]\036>b`\244\275\244u*\275L/\016=\211\337i\275et\276\275\254\250*>\250X\022\276\273\210\r=R\226\230=\343\201\370=\r\t\234\275r\315\353\274d\213/=\t\374\321\275Q\257\342=\001p\301\274vD\202\274\306\333\035>\376\270\'>\312\322\235\275n\264\311\275\350\233)=\362<\323;X]\352\275\276\021\273<B\t\214=#\374\274=$g\322:\t\311\017>\217\316\031\276\033\013\017\276\214^L\275b\331!\276\246I\325\275&Z\225\275\361_\267=|\274\242=\313\333O\275\252\2369>0\373\n\276O\367\346=Q\257y=\262\'\014\276\304\031\005>\037\211\202<\261\364\335\275`\023\027\276\227\370\201=\337\032\236\275\01408\275\365P\277\274\221>\360\275\253\013-\276Ej\031>\360S`\274\366\034\333\272W;=\276L\267\215\275:\0353\275\377\314\003>\217\235\005\276Ml\'\276\014\307\004<q\313\217=!\033\022\276\027?\331\275B\362\265\275\2714\016\276\322<6>Y\313\247\275Y\306\261=);\303=\337\272\350\275\322\331P=\354d\374=\344\261)\276#\310\216=\367\277\t\276\212\211(\275(\376\\=\016:\346=\267(\022>\244\250\234\275K(\276\275O\351\017\275\r\030H\275F\342\013>\346\360\342\275Dz\263\275\206\340\000>\r\3577\276\217\215I<7a\324\275\362z\252<1\213\232<\207\264A>(W\030\275\203\372\252=-r\223=\313J\226\275Z\023\300\275\026g\211==)#\275\266v\021\275\356\020\367=\217\354\216=i\232=>\320\322\341=\3029\330\274)\\\014\276\242\355\022<\262\034;\276\33112\276\002\267\325\275\257\211\222\275%>\273<g\355j=\325\371\262=\274\327@=\265v/\276\330\032\026=#|\032\276\342\2753\276\3513\032=r<3\276\200}[\275|\316\271\274\3224;>\332\306\306=\276\225q=o\302->\243\321\'>;\014\324=p_v\275\374\035\007>=\253\365\275X\323\214<\024g\033>V\211\272\275xJ\361\275)I\304=\352\007\002\276\301\246\216:\376\375j=\243\346\350=\301\347\020\275\332C\'\276\241\376\303<\372<\213=\307Ue\275\006\013\210=\3069\\;\023\234n\275\325\351\036\276\235h\214\275\212\344;>0\247\323\274\314\'\212\275\246\264\n>\201\231\225\275\376\225F\274\005[x\275rw\237=}\005\330\275]\221\361=oe\254\275\235\205.\274yg\035>\327\265=\276\275\365H\275\027\301\322=\364Z\r\276+\236\022>rX\211\275\323\311\331\275@\352\353=\275\303\226\275\302r5\274\322\'%\276\347\277\340\275\232,\377=\325\2619>\342v\001>\324\364$\275\2042+>\177/\023>0\326\226\275\0047\216<bE\273\275T\216\036>\234\254\014\274n\031\223\274\260\243.>\200\016a\274\376e\210=\261@\275<\337$0>\310\335(\276#D,>\316\253&\276d;\016>\254\377\340=is\303\275p\232\245=d\257\210=\346+->K\251\000>\224\2553>\247\030\253=\365\272\335\274\031\004\266=\364\360\010=Xr.=w\364\250\274\244\215*<\204>_\275\255o*\276\301\362 \276\r\317\350\272C\030\200=\3546\005\274(_R\274\350\004\325\275T\244\036\276\241\010e\275\375)\246=#\377\027>aA\324\275\367\222\r<\323\317\276;.\263\365\275\364\340\230;j\226\332\275N\205\222\275\341\014\r\276aP|=\016e3\276\002\357@\276\0202\300=\306\2246\276\000S\272=\033\021\251\274v\331\347\274+\350\222=\014>\026=\357\326\315=\334+)\276\226\0001\276\246Xc=\272\337\020>\211\335/=\013\251\212=A\3411>\306;A>\3077\270=$~\247\275d\320\035>~\005\216=I@\031\276\206\341\024=\303\005\272=\376\270\336\275\230R)=\265\235\244<,*:\276|5\344=\nR{;b\023\260=2\204b\275`\3739\276]w\020\275\213Z\023>\272B\r\276\373X\227\275U\341\032>\233\353\000\276\324m:>\241\376\276\274\nW\014>\212\256a\275\373\234\013\2768V\367\275\235\3600>9Vk\275_o\301=\332\230\n\276\207\'\001>\252\365\325\275\275\341>\276\242\347\002=\375\025\030\276\233EX\275H\264f\275\303\360\n\275o\2311\275q\372 \276\024\247@\276\354\t\014>U\277)\275\242d\202=#\311\010\276\237\2537\276y\212\032>\324\201\262\275\233Ui=\277\026\250<D\r\022>\275\246\346<\002SA\276\345\017\014<6\363\003=\374\2331\275w\034:>\353D\021>jQ\245=\021\256\020\273|\0235\275V\024Y\275x\364\336=\301)\233=d\246W\275\022\346\342=\305f\313=\263\345\214=\024\301\361\275\347\3300>\325\334\276=\224\374;\276\023|\310=\232\377\245=\324q\231<\241\231)\275L\261\025\276\375+x\275\031\273\261<\257\3160>s\362\003=\026\023\236=EU\026\275\224\001\276\275P\3165\276.l7>\222\027\002>\247T2>\220[\343=\004\347\034\276\337\262\314\275Q\336\036\275\230\262]\274^\223-\275\373\257\354=B\363\245<\204b\375=\255&\025>%c \2768z\031<_\030)=\232\337E=\000NE\272\212\213\266\274\017W\315<\307\024[\2751\355\347;\t\213\266\274W\331\240\275\323-\013> \235\351\275\344\213\322=j\255\326<\352`\225\275\021l2=\001\304\033\276g15\276\310_\254<\312\r.\276z\316\030=U \364\275\212\355\014\276\334\306?\275`9\017>\355(\245=\031\213\250=\006\3575\275\027\323:>\007E\021\276\300^\204\275\026\277\225<[\376<>\333k;>\262\202\006\276\t\307\"\276\t\023\203\2736F\033>\010\203\347=\371\3753\276\t\031f\275\027\233\200\275\311\317\255\274\3663\275\274$){\275\261\002\010>\"~\260=\200|\304=D\347\r\276U\005H=Nj\305=2\005\034;f\304:;\r\357A\276\243\303\314=RF\016>\213\024\"\275j\226D\275id\372=\351\214>>\245\327\256\2734\272\035\275\263\0325\2760\021c\275\177\034\037\276\277\037\326=\035\325\272\2759\272Z\275;IR=\030bU<>1<>3WH=M\372f=m\370\376=,\226\006\275N\225\325\275\265dO\275A\".\276+#}=\024&\024>\275\341\022\276/\251\263\275k\251\002>\206I\220<D\331\002=\305\025\017\276\374\351\330=\307=5>\312$=\276\254\r\343<Os\372<[I\267={l0\276\206\2329\276\215\350A\276h2,\276q\375\376=Lr\276=\rD\217=,\205\357\275\357\376\206\275\343\253\220=\234+\224=\244o\'\275&d\335\275\322\330\304=;\023\260=\220c\027=M\204\225=\221}\265\275\304\271\262=\275\315\304\275\252\3451\275\321\213\n\276\032\275\350=\201a\021>\020\270\223<H\005\232<\322\266\367\27552\237\275\210\376\307=\352\3374>\002l\017\275\016/)\276\241x\023>X\344\023>\203\232\031\276\362l\003\276\231\345\035\276\352\266/\276\200w!\276\213\314\300\274e\207\r\273\005\324\332=\t\313\201\273N\360\332\275\032V\250=\'1\306=]\367\206=\303\331\022>\221!\007>\373\362\'\276\342\010+\2734M\350=\263#%>4\032\">\200\010\n>\023\2629\276K\245\177\275ns+\276\273\202 \2769c\r\275\266\356\030>\374\370\364\274\245H!\276k\260\025>\202\263\001>1k\360=jM \276\323Y\213<5\273+>\341U\272=\301w\020\276\346l\211\275\212I\365\271\204\237\345<\027\032?>\322\302\301\275\013~\263\275\325\343\363\275n\246-=\251N\214\275\\\330\377\275\003\371<\276>\\$>\274\022v\275v\240\322;S\237\027>\377^?\276\260G\206\275\325\027S\275\203\255\340\275\245h\342\275\371\276\017>Q\333\335<L\005\n\273\274\032\t\275+\341\344=\251:\327=\256-\267=\246\252\022\275}\202\317=\007/)>8\3421\276-Y\010\274?\016\213=\242\376\227=ue\360=Yn\270=G\367#>\356^\014\275.W{<\013\n\362=\035\235\232=\241\177\020=/\316>\276\004\201\302\275\016\361\226=\315\355\217=\217O\023>\331\352>\276\357\037\032>,Zg\275v\277\217\275k\312\351\275\256\203@\275x\355\020\275\013\0369<\2157*\276p_\034>e\266\365\275Na\247\275\242\252\234\275\307\016\302\275G\325\317=\226*\322=\203\315i<9\251\364\275O\350/>\220\007\256\275\244\201\270\275\325\336\033<\312\257z=A,\225<\244\237\300\275\225\177\034>\324\334\325<lD\017\276\365\216\374=\244KF;C4\276<\256bC\275\245\211&\2768\342\276=!\325w=\201h2\276\313i9>ED\302=W\245\311=\243/M<\000\203$\276\345\325\224<\020H\016\276,$X\273\260\346\024\276\256\337(\275\207\210\002>\211\362\014>z\205&>\216\375\323\275wg=>9d\t\276,\322`=~_\034>\227\332\236<Njj<\344r\030\276\007\tk\275=v\332\275\361yz\275\036\237.>\256\267\320=\246\264\356\275\312}\030\276[\'\320<\271o\240\274\330\0331\276\021;0\276\200\343\242\275~O>>\363\350\3768\212\320\231=\220H\025=\026\315|\273l8\206\275\324\224\345=\227<\345\275\273\242\245\275U\324\255=O| \275?\254\001\276.T\272\275l\370\033>\000!\031\276X\224\025=\2172\036>O\364\306=31\310\2745\277:\276t\201%\274\305\277\301=]t\\<\352r\200=\257&@>\377w5>\326~\230=\271\353\233\275b)\230=\234\t\300\2756\016\000>\365\231\374=\234\323\032\276\002R,\276Q\270\301;\2776\347=\230H\332\275<m\237=\301\323n;O\235\032\275G)\205<\364\016\320=\216\371\025>\3665S=#\2519<\363#\235\275\301\342\336\275\252\001\005>\345g\263<\346\206\212\275e\306*>\234\375\022>>\007\275\2754/4=\370\314\240=\353\3336;+\315,\276\226\305\024\275S\242\005\276;\317A>\206u>>\264\037\224=5Y\360\275\265\204\252=\244\026\223\275f\017G\275u\261\005>\377\372\377\275\240B\300<\340\225\334\274)H+\276\341\351v=\205Gn=XS(\276\205y\032\275\212\331\275\275G:/\276\253\251F;|\337\225<\334\006@\275\315Dp\275Q\005\370\272\241\273\222=%\366I=\350f\231\275\010\355\276=\037\030\246<\361\345\304\275\023\007+\276l\325\221=GR\004\274[~.\276\260\001\205=\235\025\272;\022e/\276\031\235\'\276\212\177\263\275\t\342\200\275U\"\031>)U\271\275\376\3050=\336K\337\275\010^\223=\026\007\027=\330\303\">\017\034\036=\000\217\212\275L\032\257=\220h6=\317>O=\362i3>\341\335\354\274v\335\340=\016\020\005\276hZ\010\275Q\341\273\275\276\246\237\275{v7=\005\264\367=O\205\364\275,m:\276z\316\"\276e\346\302<\253F-\276\322$\255\275\340\251\324=J~\005\276\336T\020>\005]\\=\333\307O=\210\242\320=t\253\322<\304O\025>\215\270\332\274\235S\261<\252\013\243<rU\347=\231a\003>>\206*\276\214\272\246=\274\0235\2765\375\325\275T\264\246\275&\030\233=\007\203\201=\214\366V<\272\322\255=\373i \276\314%F=A\005\350=770>\241*x\274JJ\025\275\306\374\302\275G\336\252\275:H6\275\033\213\034>\177X\026\276\352\220\267=Q\331\017\276\261\251y<?\3437=\236\2405>\242\341\273;E\244\360\275\034V\007\276\206aR\274=w\022>\347\025\364=u\327\315\275X\234\314\275\236s\333=;\022\231=\276\371\002>\203\251\204=j&\227<\000\013t\275 \':\276\273I\010\276h|\030=\307\345\336<\233*\261\274\007\340\262=a#\n>>\257\311\273\327>\027>\006\220!\274~\263!\275\177\342*\276\266X\030\276Sh\367\274u\210\205=\354\303\307\275a5=>^J\027\276LL\214\274C\331\013>;4\206\275\201N\330=\340\256\032>\367{\312\275|\375\351=\240Q\372=\360\032\013=\016\262\314\273\351)L\275Y\010\322\275mg6>\375s|\275l\327\266=(\233\022>t\351\000\275\246\351/\276\353\257\240=J\233\'>*L-\276\010\220t\275\n\316Q<\203,\221=:<\244=w\007\210\275\3343;>vs\262\275\365\373\233\273\306J+>@\323\316\275\224\003\006>`\263?=\251\257\005>\335\321\265\275Lf\201<\312\250\013\276\353e\377\274\230u\017\276\316:\260=\370\203S\275\343\0330\276c\265m\275bKV\274\364\336\325\275\227\211\377=k{!\2761l\321\275\220r\236<\243\263k=\377\270\204=@L\324\275\226\304\312\274=\261\230=\363\2414>\22661\276\353@\224\275\351P-\276|\316;>\236\240\031\276\351\320\210\275\007t\005>\252j\245:<\336\214=\023\236\"\276_\3204\276?\031.>\232\375\246=d\027\330\275+\276\365<\037bT\275\216R5>xZ\336=\343\":>\254\255\374\275A\031\357\275G\r\276=\000\266\211\275\275\201\030\276n[E=!\213\307<\255@\017<0\0006\276\200q;\276\202\335\006\276$\273\037>Q\333\325=\265\0103\276N\232\010>\214\327&\276\202Y\260\275%\377{<\347\367\035>\342\244\333;\355[\267\2744\263,\275\034\272\022>C\004\024\275\"o$\276\311@\262<\n\203\350=\363s\232<|\314\227<\300\247\345\275{\003\361= \273\353\275\223[\016>\210\271,\276l\364\013\276\306k\035>\035l\223==\217Y\275\365.\216=&\347\224\275\004-?>)S\274=\r\001\265<;\\\252=x\255\334=\353\212\314\274\217s\342=_s\313=\355\3628<\303\260\335=\373<\030\275\302\177\023>{_\032=\330\203\311=\310b/\2753:9>\253\326\330=\312\213\226<\205\003\333\275\322{%\276^Ho\275\312\0032>\2353\036\276\261\220\245\275w\2221>\226\356\r>\317\360]\2758+\202=\341\0366\276>\321\352\275\004v\226\2751\200\024\275\300\274x<\212\350\025\276\205_\316=3\2419<\2631\037>\223\303\215<\003\021*\275\026\026#\275\243\222\017>\007\252\007>A\351\334=!>+=\276)\005>f\273E=\202\202\317=\313\352\244\275f\223\017\275i\275\305\275\017\212+\276\311\003\314\275\0045\020>\246\2541\276^\201\340=\2509&\276\261\315\036>Z4\254<\350c\350\2752\225\037>(QZ\274\226\333[=%\200\313\275\035\327\340\275)\247;\276\2172\024<[7\255\275\035\314\356=a\'\006<\323\304H\275\025\364\206=1\254\203\275\027\0262\276qb\230\275P\314:\276\023\230\375:\343\217\267\275\213\356;>2\370k=\242\007\014>z\032T<\204\362\005\276\235\311w\2750\000\344=\"\326\317=\241\026\342\275\212\021\313=>\002\220\273b\3272\276\214\347\322\275\177\242+=\220\013\016=\326s\211=\252n\031>+\277\236=\202\326\243\275z}0=Pt\362;\027;$>\240\234\355\275.\325\020=Mk\246\274\311\000\373\275\3633<>Z\362\326=\254rP\2742\213\"\276\330g\024=Og)>F\300\336\275\237H=>\302\275\032\275\346\356\033\275\\L\256;)i\253<MB\323;\260\351o<\020V\345\275w>w;~\001:>e9[\274y|->\257\325>>?x\246=3K\007>\332\222\267=\206\300\027\276J\2671\276\030J\356=\350\032\007\276[.\243=\311\313\r\276\221\0360\276_\255%>e\325\226\274#\356\035\276\207\032m=f\260\"\276\363h\217=\360\234L=-\223\031\275\367\323\357\275&85\275G\237\326\273E\303\241=\303\247\024\275\265\343\374=W6H<\002\374\230<\302\263\250\275\351W\006\276\352\203\006\276\220\322\207\274:\027\007\276\372d\222=O\367\374<\373\371,>\306\344\'\275\266Z\254\275\tc\'>\240U\010\275\231\224>\276\377\016\221\275\322Z\025\276\217\033\337<\306\221*>\270\303\"=\267\300\354=\316>@\276\307\223\277=\376\272\330=\"\343\213=\226p\245;4\255\254\275\325V4\276d\255<\276\022\250\345\274\205\204\370\275\261\t\306<\"\212:\276\344\370P=C\322\002\276\177G\227<\017}\006>\202\316-\275s\311\246<\032\256\013>(\315D9c\351\035>\231\325\036\275\337\316-\274\035\372,\276\r{\027\276u#.\276\210\242.>\367[$\275;bb=\321\361\017\276vpD\275\303\257q=L?m\274 \345\200=\372@\016>\301# \275\037\227o\275\301\275\255=2R\213=9\300\364\275\241s\343\275\034(p=5\332\006>\310\\\202\275^\007=>\35261>\036h\010>\351j\337\275\013m\255=\'\215\316=a\3306\276\034\374,=\022\210i\274\035\"\203=f\360\353=P\203\025>\3377\035\276\026\036\030\274\300\317\037\276d\344\002>N\027:>3\002B>\013O\001> B)\276\203X$\276\240T\006\276Q\021\003\276/\303+\276\226J:>\340\013l<\217*\016\274\307c\026>\334\310\n\276\003\002,\276~{m=cZ\036\275XT\364\274e\367H\275g\037\036\275\253\016\241=\031=\371=#\262;>/\3768=/u\255\275\036\342\204\274:\r\207\275\311\277/>\031R\347\274\036\031?\276\221\370\006>\262\210&\276\330\231\265\275E\2767=\002\344\023>i\224 \276\007\250@>/t\261\274\330\366\324\275\362\240\216\275\021\317\354\275\221)\'>\037c\316=\367\260\263=\037\210\233\273b4\r>\000Q\306\275v\0362=\035+\346:\021\001X\274\017\241\374\274\243\005\023\2762\037\376<x^)\276\031\037b\275+\034\346\275U)\251=\220?Z\274~]\366=\t{\337\275\261\315\323\274\362s\333\275\264\275\334=\306\nB\276\226\017\303\275\005**\276\331\314\236=$\342y<\311\013K=\204\3768><\247+=T\037\002>\253U>>\3203\021\276\327\351\345\273\255\376\226\275\036N\360=\363\272\177=z\213\267\275,\325k\275\3724\212<v\274\224=mk\002\2754m\356=y$\216=\322\215\027>\2103\027\275\277\221\035>\345\257<>\231q\027\276:}\026=\035\260!\275p\356\377=\004\'\257<vo\010>\373\300+>6\3218\276z\214\246\275\006x=\276\354\262\032\276\033\252\376\273\271\3247\276/@->jC\267=\007.\302=\374f\301=\264b\224\274z\337\234=\216\350!>\232\0045>\233\370c\2759\227\t>\3477\354=}\014\267<\035E \275\315i/>j\205s\275\003\3438=\356\340\273\274/\2518>\320\013\313\275\302\263i\275\227\237\301\274\233\311 >\371\346\340\275\035t,>\211V\303\275\2725\311<7\272\252<c\002\222<\307\002\377\275\256\307\266=+\337!>h\244\271\275\271l\251=\261\024\212\275\n9\t=\217:+=\366c\343=\316;\304=\334\0270\276\177\253\262=H\0144=\007\2635\275gb\334<\001\005\277<\253\273\325\274\365\352\026>$\242\322\275>5c\275~g\347=\322\010\014>\371\0356\276\305\3075\276\351]\307\275\237\360\007\276\325\2610>\2272\210=ER?\275b\032\270=\314$\024>\203\221#\276do\257\274\304\000\033=\215\356O\275\276\320\271\275o\036?\276jp\024\276\232E\244\275\257\027\354\275\302\352\027>\213\"\250=\254DV\275\022%\303<\246$5>\321|c<\3260$\276\013)\217\275\257)\007\276\235\376\303\275\276B\221=\200\211\032\276\r\010\276;\315)\366=1\3269\276\364\305\224<5\244\211\274\024~\200=\240\314R=\241\243\214\275\214\364\034>\220\265\016>\356\305\341=\247\273Z<K\227\220<\211z\240=\202/\310\275n`\341=\200\374\314=\026 \331:\224i:=\024\224<>\257+\301<4\303>>\022\332\026=\263L\017>\303\3170\276Qj\325=v\227\034>\334\352\002\276/\\\221=4Ok\267\023\3057\275\013\024\020\275\230\004\010>\016\243\323=?9\312\274\355O\233<\356\260\002>Y\263\004>{\256\000<\273\316\024>\261[\005\276\024\202\335\275\267\263\305\274H\227\273\275a\212\377=`\307g<7\263\235=\254{\027\276v\023\303=a>l=\312\326\026>C\274\260\275\320i;>\245\2443>\233V\037\276\266i\352\275pt[\275G\255<\2767$\314=\243\266\310=\000\233\241;2\247I;\301q\024;S\377C=,\252@\276\232\277:\276d\\\001\276\240\216\356<\246\t\245\275`)Q\275\2051\223\2742\017\025\276\272\332!\275\005\215*>\333e\031>\335\0379>~e\363\275\236\255\032\276ig\005>w\230\361=\241\370\001\276\004\352\267=\234/\373<\356\036$>\351\344>>\300\035o\275\'R!>\2301\031=\200&\311\275V\344)\276\330\025\277\275\255. =\353\224\016\276>\370&>\323|\212\275\351\274\022\276\345\364\037\276\t<\312<\324\200\277\274c\330\n>\031\225:\276w=\020\276/\234\021\276rN;>\373\020\'\276\317G\227=\253y\346\275\317Y)>\000u\254;\312\030\027>7\231\n\276\234\340+\275\036\311\244<\224k\226=\330 \002>\336\345\336\275Zj\005\276\234\222C\274\322\031\351=\374\347@>\252;\334=}\300\025>U\3000\275\253\'\317\2759\3373>*\237\300\274\037\351%\276\227k3\275l/:\276\311A\217\274\236S\006\276\035\216\324\275\224\217f=\224\370\237<P\252\373\275j.\222\275\351\037\024>P\315\033\276\323\264\036\276\030;\021\276\242\222\246=\"d9\276]y%>\371\303\007>I\010#>\357-/=\241!\017<\336\035\214\274D\321a<\2643\227=\200T\007\276\224\366\336\275\223f.>\021\311%\276d\214\365\274{s\032>\255\356\005\276\370\210\232=\332\266\300=\2252\007>\332\321\233=V\021\207=)<\"=\3612:\276\024\316\355=w\3471\276B\326/\276\266,\217<\347\216;\276\336\303=\276C\331\021\275=\257\317=\031\025\306<&\202\370<\372\005\331=3\306\243=\334\001\022>\337S#\276=\351.=\\\220\t\276\357b\271=|\203\207\274\216{6>\356\216)>^\022\221=\250\221\016\276\252\313\t\275\274\367V\275\224\3509\276[\032\250\275\023\265\343\274\213\233\212<5\205\261=2W(\276\367=\002\276\266\333\017\276\217\306->D\2340>\257(\226\275\211\315\233\275S\355\016\276\335a)>\301s\234=\274\266\"\275\206\213\235\274\306\031}=1\312\300\275\205\006\030>_e\034\276!\336\'=\265\004\">K:<\276\001x\">\316\263\001>,\223\017\276\365,\343=I\247\000\275\275\207\265\274\340\250\022>\306}\217=?A\362<\260t}\275n\275\'\276\356\226\\=q\261r\275\221\270\277\275\34418>\346\210\370:\267\002\265\275\325\204\325=\243I\277\274>}\317\275\367\270\177<\356\366\345\275\327\331\232=<\026\006=D\2200\275\353*\r\276\t\2426=\302\201\360=\0312q8i(\265\273\207X\016>~wT\275 F\333<\262N\325=\264\261\006>#\301\241;\305\022\023>\212l\024>\352iH=,\307\307=Y\205#\276Oh=\276\300Ig\274\367P\022\276\241:2\276c6\300=\325\271\367\275#\221\203=~\rs=\366Rz\274\252\336\206=\333Mx\275:\215\357=W\247>\274w\007\357\275\213\261\276\271\2740\254\275j\3330\276\037L,\275\350\275\334\273\212\210\221\274\274\271\001\275\206\023&\275PH\013\276\342D\310\273~\322\346=]\3170\275b\376\364:g!\014=\365~\027\276de\362\275\371\301\222\275\310\220\031\276\343i\024=S<\313=\tmc\275\t\211\324=\264\0067>C<\225\275^\354U\275\200}+;\276\277\364\274u>\033>A\315\020=\200\352\375=\242~\212=\235\371\247=\301\252=>\262}\014\276\003Hx=\217\352\241=dV\033>\342\001\327\275\034\033\361\275\206\016>\276\324\256\202:m2\207;\346\203\327\275)\3623>\363\245\201<y3\013=<\362\332\275\274G\322\274\226&\270\275\266f\005\276\347\003\220=\230\033\264\275\000\275\022\276\333\0330\276\006\351\205\275\377\355\321\275\003\301\3679\006\030\301<\223X1=\212a\247<w{\313\275Or\351\275~\3413\276\325\220\n>\026\240\323\2752\311\210=P\256\207<\206\327\201\274\005\254\007=\213G\354\275\355\324\347\275\236\014\302\275mg\021>v\3679>\241\035\003\276O\337\370=\256\304<\276\307a\215=\371\244\325=\366-j\273\360\316\312=\345>8>\355a$>\226I&=Da7\276;B1\276=\224\031\276h\034\367\275\211b/>9o3=\307\217N\274\3443\372<\027;\026>\316-\001>\003+t\275v\213>\276\324\321\245=\"1>\275sL\014\275\004\255(>\261\242R=\037\301\245\275po)>G\221\010\275\360\000\034\276\245\300\027\276\246$\013\276\363w!\275\343a\300\275\257<\n\276\245\246.;\233-j=\302\360\311=\035\026\010\276\27754\276\017\235\227=\264@#\276\0247\205=v\004\226<\300\277\017>\351\342i\275\263x\375\275\"\204\'>f\\\212\275\221\035=>\311\235\365\275\320\020x=/i\375\275\233\242\314<w\323\355=E\013\362=\234\372\325=u\347\035\276\\~\263=\322\036/=x\211$\276a\024\t\276\357\022\202=\337\024\206\275\275\004\034\2752\242@>1W+<\242m >\372\310N=u9 >\037!\207=\014\346\'>\2306%\276\305\034\010>U\177\004\276W\016\204=\t\351.\2761n.>\003\377\354\274\251R*>O\232\n\276* \352<]2*\276U\020+>\212\315k\274-\2269=\224d\343=Fb.\276w\276\220:x\346#>\346\300\003\2764\2475>\205\314\014=g\006@\275\t\257U=A:\376\274-\360d=!%\004>\272.\322=f\242\354=\207\215\032\276L#\270\275\363e\232\275@<\216\275\373\226\302\275lTA=\303\240;\276wD\326=pC\231=\025\372\245\275\016\374=\276\323i\244\275z\262\031\276\216\321\236\275||\326=\335\230;\276\007t\375\275\324\032\316<:E\232\275Z\317x\275{?\016\276&Ft\275v\033%\274\354\360y=4\303\004\276\355b\215\275\230|\356<\000\356K=\253\206\032>\311TC\274\303\007,\276\303&\211\275\300\334\335=2E\372=\347\251\362\275A\316\204\275au\013\276\022\272\013\276\024If=\036\245\010>\247\265=\276Y\360|\275\333F\323\275V1\341=\306e\n\276q\220\227=\2741\300=\357\373\t>\256\022\343=\276w<\276\010\225\205<z\t\026\275\274\032{\275\323\325\000>{\364(\2765e\370\275\275\376\365=\275b\025<\272\342?>\367J\002\276\235I\276<!\227&>\352\224\301\275\352\002j\273\207\0048>\316\252$\276}\221\364=\321\354\'\276\225\314\033\276\003HL=q\n\267\275\r\316\000>\261\225\035\276\263g\017>\010(\376\275\204-\241\274\257\244\257=ZSd=\000\372\221\275\244wu=t\2356=\025v\222=\375i\255\275\366\006\016<\036s\375\275o\314\257=\222\343=>\331c\364\275\345\334z;\262\2720>\255\315\">\320o\355;\211\226\221=\274\316\243=\207_\214<\\Md\275\241\323\342\274n\316 \276\366\221?>Q\254\367\275\221\250M\275\005V3\275\305O3\275,\347;\276qJ\251\275bW\214=\t?F=\360\350\203=;\220<\276\326\340.\276\201\330\271\274\371,:>\221\315\027>\r 6\275\025\303\'>\213\240\022>\260_H=\352\203\321\275ZY\264=\342>\304=\364\377\267=\251\304\364\2745\033c=\002 \271=\312\017\275\275\345\\\026\276k\301\315=\313\0224\276\312I\261\275\373\322 \276\240\n\351=\221Q5>\200\027I<\233\237\303=1\373\361\275)\3233\276\371h0>L\374(\276\010\227h<\r\204\022\276\201\2628\276:o\324=\330\372\305=\230t\325=\233\236\000=\377\236;\276\357l\350\274\331\235o\275\235\223w\274\344\3662\276\320\317\206=\024.\263=\250\2441\275G\363\341=!\033\276=\n\254\203=`\004\247\275\2505F\275\200\351q=\360\230\025=I\277\320\275\332\216\312=\345\363\234\275I\013\226=\236D\">sp\327\274\257\215\372=^\na\275p\220\243\275\211s\233=4\362K\275#\337\177\274l\022\265\275t\013\245=k\327\033>M\3570>\372%\021\276\332z4\276^\3262\275\020\252\240\275\204S1\276\233\226,\276s\3034>\331\013r=\313e\366=\356G%>C>\267\275\034\241\335=\333-C<\372\022}=\r\363\300=\251F|\275\014\221\225=\370^8>e\205\014\275\273JN\275e\271\334\275b\013\301\275\244:+>u%\347\275\226\213\344\275<\035\n>\232\001J\2750\214\016\276\224[\032>1H\010>\r\375#>\371\234-;HY\371\275\241I\343=`\311\336\274\177\305A\276K\267\010>\021\321\025\276\224-\000\276\363\373\004=\262\223&=w\275\353\275\333\225/\275\203\312\177\274\337\006\031\276\314\273\237\275!\252&=\230C\006=\374=\234\275\010tJ=\037\375A\276\237\253\216\275n\237\305=A<\025>\215B\301\275\366\334\004\276S\035\332\275\240\235\021\275c`2\275\337^@<\264g\267\275r-\016>[\247\'>\364\224\354\275d\306#>?\362\224=c{(>\227o0\276\241p\370\275\2513\331\275O\2334>}A\310<bYp;\322*\243\275Z\370\260:\274\221*\276\257\021\373=$rf\275\245Z\000\276\344\367\202=\312\232\034>P\214g=b\013\321=\211H\236=D\330=>3\242\000\275-\220\r\276B\347\336\275\2052,>\2019\351;G\215\355=\216\203\000=&J\217=]\306\305=\341\241\356\272\234\237\307\274\340\3773>\302(\235=\ro\310\275q\226\337<\357\001 >\344\rg=\334\365\234\275( \362\275\366W\263=\250\202\323=\212{\315\2747\210\234\275\247K\312=k\330p\275\202\027\350\275\324\320\024>\004J\322\275J#\245<;\217\216=;\316\001>\206\340\350\275N\250\021\276/\350\351\275\240\244\006\276\353T\013\276\r\021\023\276\374\210\201=FB\326=\346\340\231\275\025\272(=\251=\207\275}\0371>\247l\345\275\253]\221\275\366\316\336\274\252\252\277=\264\265\014\275N\374\016\276v\217\312\275t\344E\27568\362<N!\311\274td\253=\372\340#\276\353AK\275<O\327=\033v;>\013z:\276\216\t\215\275\350:\300\275\232n\003>\r)\001>\370\252\020\276\263:#\275$\320\220\275\336\211?>\212F{\275\354\372\267=\351\366\357<\325f\262:\347\203\314\275\246\321=>]\323\025=7E\250=\007H\007\276\333a\302\275bN1\276\016z\255\275\274\236@\276\315!A>\275\316;=\323:^\275VG\210=6\225\035\276\335\025\003=j\0035>O\r5>c5\346\2743\272\252\275\373c\204=b\304\003>\256\317\335\275\251\331\2019\244\360\355\275F\274\340=\332\372\356=\347I\314=\014\320\340=>\341\220\275\250o\036\276\366\037:\276\236o0=P2\021\275\n\275\363=|\3549>L\000\035\276\304\216\326\273\262&+=%\343\236\274\225\270\200=\227\352\033=d\205\025>&\004\017\276\320O\273\275\250L\"\276b)\277:\r\367\254\275\3551<;\213\254\035\276\211\321\324=\325\352\">E\271\354;=\234\177=4\310@=\003\300\006><\306\212=\301\326\022>\213\3247\2765\225\212<\225\326U=\355E\252\273\343q\314\275<\027\036\276Vu(\274\317O\032\276\232\230!>\302\345\371=g\331\005\275d\237N<{\317\030\276\377\0301\275J\210\230=I\022\"\276\337\250\017>\234\202\031\276_\373\376\274j$`\275\"\0319\275w\372\003>\255\350\246\275J4&\275\006\'\234=M\363\021\276\313\223\260=\273t\211<\014\021\224\275>Y\255\275\257\ns<vI\024\276\323\356\364=\203\3773>\\\370\307\273#\257\026>h\311\265\275,\233\310=\035J\275<!{4\276\271\247q=!QH=\327\270-\276}\355@>\335\266\201=\277o\255=\025\341A>HX|\275?Y1\276\216\332)\276\367\355@\276=\024J=)c\215\274\226\266\334\275\365\367\013\276\365\335V<\355\217\323=\334\rB\2762\267g=\375\312@=;\373\253=\257\247\364=\235\366\274=\3355\330\274\351\357!<?o\363=\353}2\276\363\340\023\275>\265q\275$\231 >\351\332\010>\342\232\n>e\223\341<`{\035\275\302\322I\273\031\266\317=\003c\334=\342\313\350<G\266\252=\007\365\303=\rj\213=\262\232\332\273\275\2172>X@\252<\305\365\354=\250\244\203=\330!\270\275.\205\r>/h\272\275\312\266\036\273,\310*=1\017\325=\235zW\274\202\035\'>\177\027D\275\027\"\313=\360\325\020\276\275\347\034\2758 \n>\371\260j\274\321D\027\276\211>\325=0.\202=|\3565=\226Zg=9u\351\275\331\027u\275\237\256/>\321\310\235=\336%\023\272\240\322\214=\031\261\250\275\2707\232\275q\232,=\306\202\255\275s\324\355\274\334\320\017\276\020\324\324\275\2347\001\276\001\313,=\265P\202\273A\277[={\271\010>\263\306\220=\365\030\240\275{\311\372<\211V\025\275\206\247\"\275\330\323.>!\234\316\275\007N\r\274\233\036,>\324\226\347=v\373(\275n?3\275\334\217y=\231\267\371\275\214n\265=\255K\345=\325bx=\202\t@\275\256\301\207=\276\332\253\275\\\273$\276\375\2744\276\314\354\243\275\337\005\020>G\354\022\276f\304\213=8\327\306\275\360\203/>\274yA>_\355<\275\354\005\356\275a\201\307\275\271\016\355\273\363\321\027\275D\306\035>E[8>\313\341\027>f1\034>\357\235$\276\201>\003\276J\371\261\275q\233 =\006<\027\276\227\3548\276[wy=\333\210\025>}8;>n\232^\274\274\217\017>\001\335\026\276\232\241\304\275w|\034>7\350\002>\255l\303\275W\036(\276\242\235\240=\372\377;>#\266\034\276g\326*\275\000\240\007=\222\214.=\254\254C\275\346)+>S\305\350\275\335w\344<\245V\024\276k\371\251=\014\322\275\275`\2403\276\217\022\020\276}h\361=Rp\314\275\264p*>&\365\315\275\241\327\025>\r\331->=q\315\275]\340A>\316\254\322=N\271\177;\307\004/\276\225qX<\247\234}=\316\334!\276H\257D=\344C\234<\322`\253\275\206?<<t\327.\276\003]\243\275\262\'=>$.\023\272\201\266\203=\212\310\204\275$\022\352<\n\026\346=\356Y\321\274\242\200:\276\0023k\275\270\036~\275\254X^\275\252\242\357=\257\r\354=,\362G=sK\200=\315Ia\275\037S\366\275+x\302=(\335v\275\033Y\252\275\264\345+\276>3\t\276\013\007\210<,\037\\=\260\233\271\274\261\215\001\276X4\247\275\212\237\230\274>E\201\275F\177\'\276\r\031P=\343\242\233\275\216>U\275\313\017\002=8x\242=\013\334\361=\300\003+\276\315F.>\265#\313<\256A\233\275\235\347\263=\007\261\025\276\372\230|\275G\364\026\276/\021\004\275\272\037\350\275\330 F;\347v@>\262\326\322=\tZ\023\276\267X\330<\262\377U<\350{\203\274\376\201\021>g\222]\274\366\331\r\276\312*\277\275n\301W\275B\231\010\276\340\371Z=\260\2508\275\240\344\027\276>\260\226\274\324\211\257=\002\026\n>\265e\213<\244F\017\276D*\320\275i6\225\275\251\202\226=\314\263I<\364\234\200\274\256;\033=\355\322\273=\247<\003=\231\002P=\234\300\006>dO\336\275\215\211\010=g\024\003\276\243\324A>\305\177\010\276%\242\371\275L\020\004\276Y?\316\274\311\030\267=|\251\014\276\321:\"\276\265W\276\275\215x\342\275\303;\374\274\334\331\032>\342E\035=\305Z\022=Ok\265=\310X\347=\200\311\035>\033f\341=H\007\317=\024\243e=\201\234\267\275\025\227\302\275\233\2141\276\004\302\222=\233S7\276\344wO<\324\221\034\276\263\246\370<n\333v\275\357\261R<\233\274\202\275\302\361>\276\013\303\003>pQ\037>Ux\303\274\327\t\020=\372X\017>x\000\276<kp%>Q\250\035;\242\221\226\275\001c\207=yO!>\244\272\334=R\005#\276:3\033>]\270\327=\231\360\303\275%\335\231=\340\325\017\273#\306;\276\264\013Q\275-2\014>\376\372#>\361\031\340\273\032\337\255=\rY\346=\024\207\222\275\026h-\276\363\347\031\276S\272\221\275\345b:\276I\005\024\275\337ks=\277>F\2755U[=\300v\252\273\360\0057>\244\314\037\274\371r?>\036\034\313=\330\037\004\276\226Oz\275\334\254\356=\325\222\215\275\006\327\322=B\2407=O\340\357\274\377+\220\275u\357\266\275G\033F=Z\350\244\275\350\0045>\n\3034>\316\342\234\274r#=<\025\250\006=\264\262\t\276\203\333\376=\003!\'=\267/\024\276\245\010t\275\014\024)=\360\212%\276\006\344\226=m\320\005\276ba\233=\\\210\017\276\037(0>\205\323\007\276o\326}\275\324\261b\274\373\026(;+\273\254\274\321q\300\275\304\021\360<\2475\231\275\360)\007\276\236:\005\276I8Z=\241h1=\317\351\231=f\216&>E\357\255=j\253\024>{\271@>>\357<\276HS\035\275\235\372I\2753\241%<\022\262\233=c\306\313;H\225\001>[\213\253\275\300u\r\276b^A\275\267\033\302\275\3438r=\236q\034\276\273\345\t>G\375\357=IG\260=\346Uu=\372\262\221=\321)7\276\245\005\347<\371\2574>\223\271\304\275\214QW=TI\272<\264\314-\275\333\335\000\276\354% \274\313\r\027=\362\241\252\275\332T\020>\273|>\273\263~;>\035\177\223\275\371\3648=a\263+\276Hp&\276xM0\276i\031\341\275\"\262\332\275d&\205\275q\377-\276x\224M=\362H\365\275\376E\232\275\033i\326\273\032W\025>\004FA>\301)\003\276\317u\350=}$\036\275\363e\341=\030\254\257\275\3175)\276\355\304\340=\273\361\351=I\274B\275W`\016=G\336\253\275yM\004>4\264\352\274\203\001\303=\351\341\263=7\225\\=\'V\327;\025\333\'\276\200t\216=\263\010\215=\004\320\261=\210\323A\276\30043>\257\351\'\276\177_\007\276\330\213\024\276O\214\202=\n\251\367\275W\310\031=\002\340\r\276)\321o=\266!\345\275\335\225\354\275\320V\300=\324\245%\276\373\030?\276\3272*<\350\302\033>\304\313\220=g\206$\276\314\202\203\275~\3374=\300J(;v\312\334\275\377\276\327\275\217\021\230;\226\000\026\276\222\222H\275\244Y\003>\364\300>\276\304N&\276\212\346\231\274\352\370\022\275a\031\002\276\'\214=\276Z\221R=6U\006>\203:\r\275\265t\r>\216A\340=\270\354\036>\263\005]\275(\323\222\274?\325\253\274A\371\245\275\317\353\'\276\317n\326\275g\376\r>\360\230Q<\202\257\332\275\032Ne<\324\027\336=\353\005\001=`$6>,\324\245<\306\254\003>\335\333\t\274}\351\356\275\327]3\276)s\312<L\312\350=\037[\312\275\355\3179>\264 \322\274\362\030\246<\351\223\321=%7\001=\327k\326\275\212\316\264\275a\271\"> \271\n\276\360b\031\276\344\244\t=\253\345.<\213\016\325\275q\321><Y\033\331=\214\365\253=}\241\330<\363\013\t\276\357\3208>MJ?>F6\032\276:\307\341\275\246d\302<\262\314\">\342\235\304=\3378?>o8\333=\030\260\223\274pL\327=\354\311\257=\344Z\337\275n\304<\276\2117\370\275\310\'\276\275J\204\021\276\247a\251=v\363\350=\271B/>\2377<>\363\352\251=\271\343\337=\332-\244<\332\272\023>\034|\341=;\371\212\275\263\217\270=g\020\r=\227\357\034\274\251\3359>\374\2337=\234\031\020\276&\337\366\275\203\203\024\276\320^+>-\311D\275\272\356n\275\272\005\366\275\217\300\365\275\264\372\210=\273\232\255=n\2335=_\024.\276L\371\254=\234\245/=\240\210\272=~C\351\275\\op\275\261\303\236\275\265B\332\275\001\310\222<\033\200z=\276\014\006\276&\025\264=x\273\006\276\306X6>\2722\367\273mG\247=N\227\r>6\202\257<@\003\263\275nV\240=\360x\260\275n\326\275=\310$d=DT\350\275\356\342\'\276\345P\023>\207\033u\275D\3065>\362\023\374<\211\034\025>\342\234\030\276Ds\267=N\206k\275\204c\202=H7\333=m\341\250=48\020>)\003\005>\352\020\014\273rP\013>PM\025>\311\244+>\325\254\224\272\230B\"\276p\315\035={9\300\275\314Nr\273 \346\366\274\275\326\014>\352\244\267\273e\360.\276\020I\215\274F_9\276P\006c\275\030g\017>\317\0213\276i\312)>\334\000\033\276\021\020w\273\260[\313<\2454;=\000I8>\r\225\215<%\246\020\276z\037\023>\275.\257<\262\353\324=X\320\235\275r\317+\276\332\304\276=!\211\312\274]\363\375={B\254\275s\000\313=\200\023%>\310\377,>\021\243}=W\244\360=\3735\203\275\303g\327\275xx\035\276\017z>\276\236\325.\276#\207\315\275\244?N\275E\n\016\276\275\025<>I\250\210\275\263\251\262\275\363d\220\275\241\221\004\276\322\317\246\2754\241\216\275\260\215\345=\352\020 >\224E\'>u\305\246\272\244\'\257\275\326\325\006\276E\026@=\035\367\251=\361\253&=\007\305\315=k\200\031>\212\374\324\274U\024\260<\021\351\272=\204\266\200\275\237=\023>Q\017\265=\026\357\343=\365\241\323\275\302m\033\276\217\212\n>J<%\2760\253H\274v\300\214<\014P\267\273\301\014b\275\214A3>\t5\341\275_\235\017\276\266aD<\031\273\253\274\2233q\275\206\330\366\275\360\371.>\010\276\237\272|\2344\276\n\356!\276j\337\307=e\341\260=\004\355$=>X@>\014\252\210\275\n\023\023\276\306\207\010<\"\342=>\313\355\024=w\225\021\2769\222.=\312\254\246\275\254R\'>4mp\275\200s2\276\346\366z\274\226\341-\276\325\374/>\210o->}\336\033\275aV\232\275\252X\310=G\276\247=\214U#=\327\360\203=Y\255\n=x[\311\275w\243h=\2000\006>\302\334/=\343\033\377=\253Q\264\275S\267\375=\327\366?\276q~\330\275^\327\245\275\200\343\250=\252\231$\275x\201\263={\361 >\211S3>|\217\374<vo\r>\017?\310\274\341\331:=\343\213[=\020#6\276)V/>\303\224s<\324\"\016>\365\277<\275\240\275\374\275\324r?=?\270\351<\222\026\033\276\345\226`\274\302=?\276K\257\253\275\216.\026\276Z\254(\276\013\365\017>\230\320\372=\312\235)\276\260\021$>\rl9=\277\251\232<\315\2777\276\236U%>\274\276\333\275l4\t\276\343\233\345;u\207.\275\344d\232=/\311s=\356\334\222\275\343n+\276\226`\373\275]w\372\275\204Ek\2750%M=p\267*\275Q7@<\343\236\244\275F\211\347=\014z4\276-\0202\274\216\244\221=\372\201\302\275i\\\361\275X\204\017\276\276\2465\275\227\211\326\275cM\345\275\014\211(\273\262D\253\275%\016\327=K\020\270=%\307\331=N\007a<\256U\034\276a&p=\027\006\354\275/\010\203=<\336r\275\237\270\003\275\003?\276\2757\202\312<\341\2342>\263:.>\2032\271\274\227\327\221\275\306\3260\276\274\370\003=\350\201\031=\347\237/\275\242\307j<\372\2336>G\272\210\275\017\221\343<\243\317\000\276K*$>\266v\026\2762\352\342=)\031\351\275N\242\026\276\025\263$\276\r\346\005>\000>%\276\267}\030>\340\307\007>\332\0134\276[~\273=\300\2216\276\354\320$\2769\254*>\326<\322\274\341\3529\2763h\t\276\253\206\345\275)I*\276\247\351?\276\005(\260\275\0106\216\275\205$\014\276N\231o\275\277\363\035\275\024\3722>\334\337!=\267\244\t\276v4\347<\262\222\014\276\364(\373\275\323\256\345==\315;\276V\373\335=\345\332\024\276\242\"\2049\354\335\030>\345a9>H\336C\275\243\346\021>\233Pr=\253\321\027\276qHx\275._0>\367\226\033\276\250\360\026>\256\262\026>g\t3>\236\321-\276\221\267%\276\003Q4>\232\037\202\275g\204\030\275j[\253\274\361\304\001\276M\313\342=\'\"\301=L\\\025>=\231\t>b$P\275\200\375R=\342,+\276\306\371\202=\322(;=\245{\313=\207\001\367=\303\020\340\274\353\\%\276}\0176>]*\035=\2534\200\274Z\317\325\275\227\005S\275\243\205\322\274\243\365$;f\363\315=\267\225\r\276\346T(\276\347d\024\276F\177\356=(\346j=\324\035\r>\214\251\335=\265\2509=+}\356=\374\343\032=\3205\033\276IG\300=bI\242=\351i\340\274W\365\364=\330\376#\275\321\374\020>\245\323\025>\353\315\213\275\320\202\017>\016\'u\275i\017\325\275\006\315)>@\236\316=o\342\237\275\025\007?\276\333\342)>mC\020>!\370\364=\277g\022=\215\267\272=\376a\270\275\325\202\375\273\351\203\023>\241\204\265\274\336\2733\276\267\013\346\275\360\211\351\275\006q;>\3346\200=\032\346\261=t\256\341\274&\2714\276\000\310v=\030\356-\275w{\367=SL\027>\206V8>5pP\275_L\030\2762\332\250=\366\277L=\264\340\352\274\372x\330\275\033\306\310=\220\264=>\025\314\001\276h\314\307=\276F\314;\353\3204>\263Z\014\276\357\374Y;\350}\262=\0032r\271\025\2465=\026\316.>\006\r\310<f\213u\275\014\355\006>\001^%\275!Z?\275\265J;>\033\236x<\013\275\355\275e\017%\274\217%\335=y\211\376=\360\220I;\024\327v\274h\243\255\274\220\035>\276\312=\210\275\004`\"\276.\334=>|\353\202=\216\211\031>MX\007\275\005\372\210\275\221\\\343<\354\233d=\345\252&\276LUT=\367\227\031>\224\330\256=?\177\203\275\224$\214;\271\373\361=\030\254=\276\207\267\216<X\010\215\275e@\260<3a2\276\240|\231\275\271\346.\276\370\356\017\276+\350\222\275\210\204\304\275H&\371;\361\366v=\313\\I\275\336\021.\276f\205\037>\344Y\314\275\254\0331>3w(=\200v\005\275z_\334=\331\256\203\273\034\333n\275\035\342\025\276+\\U=\262\260\353\274>\251\035>\225P$\276\031\037>=\t\302\205=\341Z\211=?Y\034\276\003\277\267\275%\316\375\275\240e\327<>\377\027\276\225h\273\275+\250\006\276\014\014\215=5\211\023\276 Q\037>r\216\202=\317\351\322\275\355\267\363\275\363\217\340\275\205|n=\030\3623>\374Y\304<\264\376\r\276E\377\321\275aeb\275\212\356\017>\021\227\303=\205\035.\276\357\271\016\276\377\271\223:}y\031\276\0342Q=\263\331\316=c\270$\275\356\221\254\275\207\306\t\276\025]>\276?\022\037\2769\006\367=JR#\276xqb=\0077L=\257\237>>I\245\234=\323\023>>9O5\273\257\221\276=\340\257\007>\272\371\264\273\033\332`\275\356Y\264\274\034\223\350\275\354\033\021>OZ\311=\261N+=\3345\314\274\375\002\006\276Ze\337\275@c\035\273\357\335s<$l6>\343\215\216\275\374\3209\276\351\277\320=Vu\023\2767a\017\275\3162\333\275-B%\276\335\307\037\276\340\3052>\317N/>\226\365\314\273\220\261\335=\331\302\023>\030B0>w\264\034>\341\271X=\347%\206\275\225\271W=}\'r=K\321=>\276\337;\276\006\0033\276>\352\001\276\232j\264=\013L\363\275`\225\026>^\252\n\276RJ\241\275Fs\225\275I\331\030\275t\034,\276:\362.=\262\273\222=\253P\007\276`\0350\275\223{1=\321\314\307;\016~<\276QE\310\275%\r3>+\377\347\275\247K\344\274,P\204\275\227Z\021=\\(\374=I\214.\275\331@\t=`\335\001>w\256\222=!V\344=\031WU\275(\010,\276\343\322\372<\020\305\004\276fa/\275\312w&\276\276j\345<\233\275b=vP\274\275\335\326\017\276\222\363\245\274\340#$\276\205\022\211=\335\000?\274\277\216?<e\204\336\275\326\r\314\275k\253%\276/p\004\275\314\236A\276\227\250\255\275\3348\t>\263\373\212=\251M\226\275T\t\322=\007\372L\274k\311\301\275\037K1\273\303|\n>\024\0322>\261\245\204\275\353\315\351\275ln\237=\n\324,\276\025\362\377\275/\025\'\276\013\343\005=1t5\276\222H\335\274/.\035>\'\270\035>\031\236\201\274\\\357\017=a\177\322=m\241\r>\231\315\013>f\\\334=\324q\035>\367\275\266\275\032\354\305\273\336\3414>\t\201\233\270\232\365}=\225o\215;\305\346j\274\351?\374=\372^\210=\210\232\256\275\237x\031>H\226\021\275\366n\033<\026\322\240\273\342`\313\275/a\217\2755\323\026=\353\311\021\275B\271{\275\211\330\001>\302\240t=\334\241|=\330\255\017>fv?>\306\344\206\274\013\3424<\335\233\000>\221\030\024\276M\360\327\273\237\2324\276.\010+<\247\262#\276\212u\277=\335K%\276]\221\252=\270\352K<8o{\275N\276.>\304\322\360;c\233\030=a\344\002>\017g\277=1\232\325\275\177,\231\275\023o\020>\356\030\320\275\256[?\276\240\201\'=B\201<\275\2759\007>~\016P<\326\335\340\275\361\360\000>6I\330\275\271U\016>\365\276\261\275\304P\263\274\013w<\276Bn>\276\316d$=\021C\222\275\314\257\014\275o\376\002\274\237\001 \276\002\203\331\275\313\036*\276Kd\377=\305k\221\275\270\264\376\275\t\270\016=\321^\020\276\321\262\030>\322\3123>\300b\027=\373\306o=\333Q\206\275`\370\006>\275\300\360==\352\366\275M\237\014=\301\216;\272\356\350\247\274\000\226\000>\271\035\271=~<`=\313\331\210=\372\251B<\317c\023>\313;*>\210\310\035=\010\277\267=\017\022\250=61\027\276\345\0248>?3|\275{$\326=\237\2475>\320c\210\274\222\206\351\274V\354A>\303\035k=\240\2753>\030%\277=~\262S\275\020\2474\271\376\007\030>u\253\006\276T\343$>e\372\205=\231X\376\274\370w\271\275\321v\360\275O\220*\274\247\245T=\372.\251={l;=\226\314\247=V\267\320<\301\014\206<s\037\014=H\365\302\275l\231U\274\035H=>\023\":>P\377\231\275\212\331\377\275A!9>s1\210\275\274 \372\275\010\274\271;sp\343\275\245\342\253\2753c\257\275\337s\265\275>\231\334=:\3220\276\033\265\377<\2660E=\216.\031>~\216\003\275\352\330\353=bc\022>\301\313\203\274\355\256\237<\332\233\314\275\373\302\004>\341\304)\276\306kq\275R\303<\275\223a6\276\354\t\245=$\317\321\275\347\3154\276\207\3418\276\253\342\347\275\374\344\352\275B\\+\276\221\037?=\274\370\233<\275B\034>\320<9>j\230\017>\203\305\344=v\363\r\276\007G\014=\240\2479>\261\332\006\276\226\3669\2767\372\227<\330\020\256\275\212\3339=\343y\251\275\225\211\241=\0207:=\230\035\323=Y\373\021>\205v\371\275J\353\013\276\037\036\332\274\265\275\021>\357\323B=\364\270\243\275\331\260\312<f\212\024=4\265\n>\240/\365=;\340\006>[A\273=h\354\343\275?\311A:P]\362\273]\201\240=\3337(\274\'\255Z\275\003\320\014>\316\320n=,\024\355\274\325\306\035>y^\226\275Z:\363=U \323\273\221\221\337=0\307\216\275\034\274\">\201rp=\217\2678</\021\026\276\3031m\271k@\266=\366\327i\275N\237:\276\241\206\264\275\021\335\024>#\036{=\212\3672\276\363\272n=_2\t\275\343\347\351\274\0309\341=\260\314\004>\016\262\230=\205\351\006>\006\2714\275UXt\275\373:\344=\335\257*\276\033\277\374=\2300]=\302`6\276\311 \344=\232U\362=\351B\325<\262\301\236\275\316\235x\275\311\362\336=\2702*\275\337\266\235<D\204\032\275:\"\252\2756GH=\373\263\014\276\345\367\321=*\223\037=\'c\035\276\035\314\367\2751}\251=\331\231\001>\357x\374\275\230\212.\276\020\220P=n0!>\263\262J<2U\n>\t\255-\276\224\356p=}H,>\225 Z=\340\276\"\276;\303\022\2768\3771\276\213;\225\275e\032\"\276\027\007\362\275Cj\314=5\177W\275I*5=\275\350\034\276A\260\000\276\n]\374=\251\265<\276\001\007;\276\223\362\020\276\227wP=-\035\241\275\236\322\313\274Zh\257\275\022\236\241\274}9&\276\251\206\013\276\246|;\2766f\261\275q>\234=\324\344\276:\313T->\035\226#\276\026Y7=\315\267\215=>ZS\275\311F\'\276{\3232=\272f\202<\264l%>\177\212\002>\265\311%=\344\020\245=\350\0306>\341\324\032\275\372\272\272\275[B\300\2752P\010>Z\001\356=\271;\342\275>\322\265\275\025\355\246\275\212\'\310=\200\351\027\275q\214*\276\302W&=!\306;\276\177Wp\274\302\022\022\276\376fq\275r\275q\275\274\376k=\226\311\256=\250q\243\274(+\275<\221\320\366\275<T\315=\330] \275\277\367\021\275@\306.>\376\273Q9\001:\001>\345\303\000>gR\016>\362Y\250\275\007\270\240;\244_$>lY+>\032\363\323\275\225\0200\276S\331\367\275\023\345\263;n\333\031\276\220k\033\276\014+\021=\212g\235=O\347\326\274\265C<>m\007\216\274\002\310.\276]\020\376\275\210\235\245\275\255\200\370\274z\302\244=\017\177\027>\rX\032\276\343\370\024>m\336(\276\267\260\240\274Tl8>\221\2408<\206\022\026>\365Z\037>\303\330M=\202(6=\355\363\300<\344\266?\276*\217\n\276o\201\225=i\222\207=5F\020>\031\253\251<\372$\245=\370\333\014<\322E\032>\201\206\036>\361\274.\275\257\251>\276\007m\004>j\354\376\271\341q&>\321\234\037;\253Jx\275EA\264\275\227c[\275\371;\316=o\303\001\276\326\217Z\275\017Mu<\331\205\254=\032\0025>\2358x\275s\037\313<\003U\223\275N\366\343\275\333\3366=\t+\024>\373\032\357=\212\326\240\275Y\2728=b\222\031>\363=^\275~# >\301\026\304=+\206\264=\266\230\320=\0332\225=\376|\262\275\n\3350\276\2120\344\275#\373\324=\216l\306==\216\334\275\375\357\360\275\306z\323\275\363>1\276\355\301 \276\223\205\014\273M\3468\273k*\351\275\\\325\010\276\033\274\243=[6\"=\nD\202\275y\220\031>\241\363 \276;\334\007\276O\337\006\276\243A\363=Q\270*\276tL\314=\206.\362\275z\372\'\276\213\361\344=w0\020>\204\316\014\2769\316l;\023\301\037=<\377\036\275\250\303d\275;\"!>\376\353\206<to\004=\213\267(<\351\225\305=\203\004;\276\022\301\366=\346\376.=\014Y+>}\2773<\320\002n\274\335#7>\362P6\276\247!\271\275-\027\213=\006EW;\233\362\016\276rg\211=Z\230\036>c\032\261=\026\031\027\276\234\014\254\275\0335\244\275\004\300\220\275\037\212\304\275\223\276\003\276\361\025\377\275$|\322=\337\357\004=:)\034\276\252!R=h\345_=\244v\277\274^A\274=F\265\007>-v\344=U\364\377\275s\2274\275\013\263(\275K\231?\276Tq\276<n\213\004\275\264\256\213:\375\215\000>\302y\317<\t\010\372=\n\264\255\275\335\027\003\276\273>#\276\247\352A=d\326I=\214\264<>\363\275X\275\274\352\023>A\024/\276\202\217,>\353\264H\274Sc >z\234\350\275\3562\036>\004y@\276\267\275\276\275\214\305\377\274\037\025\255=\257:\3409D\210\024\276\031\034\261\274\350k/\276\335\277\014=o\251p\275\347&=>A\326=>%Y\n\274\301\332%=q\241\345\275\217\365\251\274\246\306\256\275\004\227\302=UZc=*\231\216=Q%\360\275\0100\000\276\023\213\255=\320\203\034=\324\200\206\275\232NB\275\327\341O=\220.\300\275\256\360N\274\217\315\310=f\255\352\274\344\204o\275\300\334\003>\310\253\207<!,\274<\364\240\354\274\305\245 \2763z\364\275\210Q\035>\240L\034>\223\320!=\316>\034>b\326\327=4\305\233\275\000\213\210\275x+\026>\006/\010\276\004\216<\275?}v=\031\r\021>{\247\000>\275~.>\271i \276\252\327\202=\212\226\323=\n\312\013\276\322\2151\276\265JI\274w\203$\276\345\t]\275=W\311=\363\202\'\275}\207.\276W>,>\375\231\036="
      }
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
          dim {
            size: 47
          }
        }
        tensor_content: "L\017}\274:\201&\276<\240\320\275%T`\275\272X\363\275\203\253\351\274mn\323=9?\203\275P\261%\276\"\264\035<\341x\352\275I#\004>\375\265:\276\346e\331\275\236y\004\276#\366\351=\026\3523=\216Y-=\024i\374=nc\003\276\314\347\253\274\226w\265\275d\360 \276\224\235\204\275\250\3007\276\re-\275\351\274\024>\254N\347\275\365\375\354<\227z8\276C4\022=\335\003c\275\367+<\276H]\205=\326k\026>\301A\n\276\366\367f=\r\227\014>\004\214\370=\000\372\262=\0163v=\005\350]=\013\364\314\273\327 \346:G\354\206\275\251\327\367\275L\003\264\275\001a\257=\213\221\230<&\226\000=\372l\032>`\376\377\274=w|\275I\362\270=e\244\311\274\342\'=\276/`\246\275\234\251H<`!\"\276\327\024\224=\360\304R\275T\303\017\276\nZ\024<\300\235\006=\357b\032>\2006\244\275\236\232=\276\277\354\273<\016\324m=u\006\333=\014\034\323\275\016\013\202\275\207\270\341\275\'\320Y\2757\234f\275\221n\024>\232\230\344\275\263\\\251=\372o \276\375\372\r\276\331I\345=\247\256\r>\307\"\276\2756\362\306<\001V>>{\254\334\275\334we\275\020P\014>\277&5=\312\374\305\275\323\0261>\256\347\255=\"\r\375\275\275\365\035>5\204\017\276[\215=>B\225\r=\242e\032=)\250+>\240\225\362=\010\331\034\273\340\230\003\276\303\336\233\274\354Q\204=g\3743>\345\367]\275\3062+<\303wB=\214*\027>Ta+\274\303U\025\2767\331\245\275\352\213\241<\272&\006=\334\001\326\275Q\000\370\275\007n*\276\240W\027>\304N\001\275\010\375!\276\017z\370=`\t\345=\002.\n>\306\253\021\276\343\273\202\275\20781>\356\206\251<\220\2511\276\222\237!=\354\025\215\274y\254#>\346\323>>-\235X<\243\243\231\275l\371\203\275\220B\363\275ua\361=\016\016\257=\322\313\257\275I\304\033>>?\227\275\272\035\020\276\014\271\006\276H\200v=\301d/>kYb\274\203\312w=\024K!\276+\006&>%B\030>\237)\240=\361gT\275\375o\272=D%\031\276\246q\341\2758\342\354<\355\233<\276\2225%>\301WL\275\275n:\276^-:= \002\205=\330\017\311=\350M#>f\025\027>\2760(=\'\236/\276\327\035\316=z7\212\274\216\207\277\2754|_<\233X2>\254\315#\275\337\321{=\267\022\352<\255\373 =\'\370\003\274\303\'\024>\371O?>\211\247\207\275=\032\017>\360\275\005\275:3\326=\014\014\001\276q\255\307<q\321Z\275\204m\021\276\361\335#\275k\260\264\275y\0035\273\007\262\023>\033\n\017>\345/\374\275*\262\325\275Q*\234;\257C\341\275l\'\246\275\007R{\275\310>\212\275\017\016\232\275\372\001K=\032\231&>\266$#\2765\3404\276\343\206\230=\277C\350=\242\025\'\276\241o5>\222v\177=W\260\007>\200\373*>`6<>@-\207=\200GY=\363\324#\276\001\362\274<\017\211\024>\004\302Q\274*\2572=*\361\031>b\377\366<i4\021<\351m\272\275\342$\326\275\177\346\220=\035\3176>\234\024\336<T\352\320=e\276\002\2761R\332\275\356n\244\275\206\201\205\274V\005\211\274> \016\276\3126\330<\021>\370=\235a\220\274y*\322\274Q\3617>\272\207\013\276\352\220O\275\023\327\006>\243\205\302=\262\2122>)\360g<\350l\371=\262\226\333\274\334Y\261=@\3572>\333\004\026>wi\330=\310\222\255\275\261P;>\270*\377=\237\004Q\275\234}q=\367o\213=&P,>\300s\323\275\267\000\370=\251\375.>|:b\275\306\2049>ww\312\275\354\342\243\275S?\236=\323\367\313\275\037\201\027\276\017\373T=L\246\006>\013\235->\2275\001\276\257]\007=\270\256\274=^Q\354<L\004\033\276\244\317\031>cC \276\362\241\"=/f\'\276\366t8\276\024\304\337=\225\333(\275d/\330=\347L\334\275=\353l\275\237\303\272\274_\003\032>\224\340&>i\222\312=\377\327\177\275\337U\325=\370P\004\274\203\226%<#k\001\276\205\307\213=|\207\333\275\310R\031>\027\016f\275\347m0\276\\Z\001\276\036\200\025\2765y<>\267\375C\274\242\3378\276m}\n\276\031\245\030\276-\374*=1\315\036=\351\226\341=}|\030=\262\353\'\274\312\307\033>\203\356\376\275\233\353\032<\343\006\007>\273Lx\275\207\233\234\275\243\326\377\275;\213\214\275@\317\372=$=\036=$\002\225=\342\024\223\274&\034&\2768\377\n\2760$\215\274\206\2022>\344\033\277\275;\262\276\275\232^\276\274 \037\013<\257\010\037>\205b\342\275\226\245&>\276\000\363=\327t)>\013\342\005=-\013\034>5\371\242\275\275\320$\276Xx0\276\314\370\331=4\322\267\273i^\017\276\205\2654>c\274%>\353.\033\276\372:\363=\331\343\r>\024\004\315\275\336G\261=} \353\275\272\225N\275\201D\034\276\333x\215<W\017\203=^\327S=\307`c=al?\276\310\246\242\275\241\231\032\273\247\271O\274W\002!=D\221\376<\017\'#\2768|\335\2751S\000\276\000\206\024\276\344,\212\275\274Rc=\331J$>\350\376\210=6_\254=\216^Z=\023\247\371\274\377\3213\276Vh\010>\374\255r\275\223\327A>\037\255\001\276l\261\223=\333\323:>\241\3711\276\361\262\262\275\211\317\033\275\017p\014=|\243&\275\217<\364\274\240\324\302\274\204\203\221<\264\340\363\275+\2732>\214\306\232=\203\361\227\273\335*\322\275$\327>\276\261\317\r\276\257;[=\205\260<\275d\001 >m\274\336=\272?\217\273\004\266#=U02\276\\\004<\275\265\237?>x\031\007>^\321\264\274\2735&>\247\266\306\275\366\0018>r\002\023\276\267~%\272\203\335\237<\320H6\276\216\017\203=\372\351\221\273\204\230A\276\352n8\273\240\207\'\275\2666+\276\271Q&\276p\3000>\325\022\034=\316\016\037>\277\276\255=V!\312\275\311\354\254\275I~\240\275z\331.\276\274\317\223=\344\217\376<{\222C\274\274\366\302</\2276\276\252\221\301<]\"!>\033\225\004>\013 >\275\322\342\"\276\214\r\022>\016\324\223\275@\314\'=\230\232\001=\275\310B=Q/\371\275\202\322!>h\"P\275\262q\">\316\232\343\275\241\222+>\252\0026>\256\250\010>1V\215\275\254?\300\275L\177\001>\256\271>\276\2774\310\273\271\024=>\030\260\220\275\233v>\276\226n7\276\365\006K=.\325\241<a\275\234<3\210\016\276(\216\364\274\355T@>Dd\250\274\217\203\374=\252\007\026\273\200?;\276\037\243\332\274\017\245\261\275\221\"\016\276>i\244\274a\231;>\266\\\321\275\025\2269\276\254e\220\275R\3711>\252$\253=\342\276P=B\202\027>-\253\242<\223\265\362\274I\370v=\207\257\251\275\177I\244;\256)2\276\035\2725>YX\010>\220v7\276\261\227\037\276\251\017\215\275*\200;>\020\2315\276\232\257\001>\005\312\025>|Z-\274_\005\364\275-\304\353=\211\307\277=\346\306\031=[\202\274=\313X\201\275zi\312=b\246\301\275\363\202\216\275YcV\275\001\006E\274\001@\274=\376\274->s\336\007\276q\217\026\276\371()>\022C\270<\354x\312=\365\301\370\275\231\232#>\356\252\373<w!\224\273\304\270H=\210h\347=\327\367!=g\330B\274h\230\200=\312p\250\274\377\317+\275l\335?>\357\223\'\276\023k\">\334\024(\276\\\232\263=JI\022\276\376pa=zl\234<;\232\006\275]>\342\275\035!\306=\337\3219\276BR\r\276\000\204\253=\247!a\275l\000\246\275\210\352\000>\304\302 >w\027\205=Wo:>\313\260\030\276\200\005\030>\323\253\366\275\\\363\007\276\004?\377\275+\354\037=\352=\003\276>\247\203\275\241\322\375=\036rb\275lW\201\275\t\017\023>\362LI<\276U\021\276<\362*>\305\t\316<\242#4=\010p\022\275\227E\033>\207l\250\275\214R\205\275\370\025\317\275\362\356\332<\376\204\026=\360\207\t<V\243\354<G\003\376=w\271\016\276>^\226\275\220?\334=\013\253N<\377L\301=\330\361\024>\311\014\371=\037\205\035>\334\3762\276\232e\n\276\365\034\022\276\216\326\334\274g\033*>={\253=>l6\276\34340=N;i\275\0367\222=\315\316\352\275\016O+>{\\L=\231\025\347=\207\255}\275\315\034?<\333s\006\274\312\313\010\273\351z\021\276\000\343\333\275\036^Z<\224\014\200\273\371/\362<GB\365\275\266\201\000\276\321\326M\274\037C@\276\214\207P\275\234S\302\275\177\361Z=D\275\004\276\251\373*\275\267\260\t\275\242\3650>\013N!\275\367\320\201\274[\266O\275!\360;\276\030\373\203=\301\2657\276-v\326\275r\331\232=P\234\231\275q\214\027\276&E#\275Iah\275\177\322\373=\300y\024>\210]\016=\231\300?>r\274\355=QdU<\326\364\372\275\376\374\263<cNJ\273\324\0339>\236\351\010\276_\277\017>>\252@>\234\367\223<\257\030x\275M+\201=^\223\352=\256p\214\275\233\364\007\275)B<\276\201_\216=\266C\351=Y\237<\276\243\2743>\254z\377\275Xw\357\274y\036\035\274O)\325\275\262r\013>\247\277K=\323\376\262\275\031\354\315\275\360\2503>\247\331\'>\363\224\321=\026o!\276QW;\276\00458\276\037\333\'\275\215\373\204=\023\311\027>w\004\347\275[.\030>i8A>\301\201p\273\262\347\013<O*=\276\323\234!\276\362\014=\276\275\215\254\274\230k\230\274t\274\247\275\361\2516\276\0011\247\275\264v\035=\2078U=A=\211=\226\231\217=!\035\006>&@\227=@\240\257\273\034?J=\370,\356=\231;I=\n\256W<\334\034\342\275\007,\022\275\227\224#\276\351\323~=M\363f=\021?\273=\027c\013=\312d\270\275\000B\342\275\344\027\260=\312\313\347\274\314\215\272\275\335\n\210\275/j\0109U\322!>K\036\341\275\302]M<e\351\235\275\014\344\002>\274\355.\275r\260\320:_T3>\'\351\230\275\274E3\275\225\351\022\275\250\235(\275D3\023>\377\376\t=z\303\260=\350\225\030\271at#\274\340\3765\276\314\254\000\276\353F*\276\022E\022\276`\030\025>_\311\n\275\306\323\226\275\252\233\235=\207q\372<\356\264\032>\327z\343\274kZ\342=\002\212\243\2756\023\016\276o\3278<\200\235G=-\314~\274(\304\020>\375\220\211=\000\340\312=\220\213\350\275\261\030\n>u\210\303;\"\354\251\275&\370\262=P\340\t\275O@\034>\242v-\276;\223\033>\235\376\374=\242\231\256\273\361\310\230\275\035\341\325\274\320\026\271\275\'{\013\276G@\034>\241V\371\274\260\004\231;\007\2664>\006\034\023=w\265\r>`\373\327\274\020\266\270\275\242\350A>\275\357\304\275\303\">\275\210\020@>Rz<>s\273\362\274\212`t\274o\337b=\023$\352\275R\276-=\263\267\026\275\010\255\237\273\327\276\013\275t\217\377=\271\313\277=\251 g=\217V\000\276v\372;>\234\200\346\275\361\354\316\275\346&#>\007/;\276\032\356\351=\273p\'\274\353\234\372=\320\257<>\321\032:\275\343\277;>\353\354\034=\020\257&\274\261\362W\275\345q\013\275\220\243>\276\353W\237\275\033`5>\210\010\033\276\007\254E\274&\211\272\275\252\332\"=L\324\254;\267\247\013\274\214z\267=\222\017/>q\335\365< \252\020\276\211\001.>\017\0327=\307\324\000>\375\341\007>\334\323\336<G\3007\274\327\377@\276\362\206\"\276\214\306\262\275/=\034\276\014\264\"=\2666\345=\275\321\004>\357\220\252\275M\245 \276\304\275n=:o\371<\213\031\263<QI\334=\"\277\n>{\245\027\2767r\214\273\004U0\276\211&\346\274n\310\207\275\360\351/\276\343\331\276=\255\014\201\275gq)>\177n\360\274\272\221\373\275\335\031\277\275M\312\201=\034\310\205\275KK1>\222Oc=t9(<sz\002\276|L\350=-\215\240\275C\003B\275n\262\244=\326}\315\275\247(7\275\320\317\372\275\250\3371\275\271F\351\275I~=\275\263\265+\276)\363\350=\240\3524=\356Vz\274B\333\330\275\314\355\013\276\2348\305\274JX\224=\303\0109>\013k\002>[!\352\275\300Z\210=\024\3708\276\\\241\024>\344\020\274\275v\2231>g\r\222804_<\027x\366<8\204\277\275\256M\n\273\013t\n>+\203q\275B\232\032\274Qx\244=\351w6>x%\306\275\314\202\022\276\021g\366\275y\254N\275\315\311\277\274\303_0=G\342\352\275\261(\221\275\3373o<\263\264R=\373\224\"\276\253Q\013>h\237Z\274\020F\341=J\215\217=<\267\270\274\017\245^\274\326M\014\276\003\024\201=\217\217J\275\005\345)=\2038\275\275\371\031\263\275\251\375\022\276\316o\036\276\232\323?\276b\r\223=\365\255\024\276%\2476\275o\000?\276\363\005\223;\316p?>T`\375=9\n9\276\205\236j=\336\262\367=>{\032\276\261\006\245=rA\373\275\227*\333=\275\\\002\2754\214\275=p\241&\275\307\333\316<9)\257\275\323\336)>v`\223<Y,\r\276\257\003\332=W\035(= \n+\276\366x\006>\252\335\277\274\367}\327=\241\014=>6\364\025\276\256\360\257\275\362\020{<i\376\036=\354l0<M\3515=\366\031\234\275]\346\231\274\033\315\314\273\373\017\373=\263\265\373\275\005j\361=C\353\035\276\013\305\237\275JH\r>\275WL\2749kt\275k\211\363=\224)\222;3t->\345W\212\275\253\370\227<\361\361\023>al\260\275\264\265\254<\344\014A>\224h\013>qYu9=2\377<*v\215=,:\014>\202\005\021>C35=M\200\036>\215p\031\274\306\335$\276\002\302\325\275\323\240\314=\370E\240\275\243i\014>\032-)\276\213l1\275c\377\\\274\236\215\200\275\0136\315\275j\032\277=v79\276\337\037\315=\304\024\324\275^\227/\276\201x/>\336\224=>m\255\016\275~\277\356\275\350\353$\276C\241\305=\245H\250\275H\205\331\273\263:\205=X\035/\276\342\371\001>\030\210\375\275\316)\350=\226\177c\275\210\034\004\276w\250\030\276h>p\275\021\036O\274\243\273\333\273,Un<\032#%>_\206\346\274\206\223\364\274R\034\316<\347\303Z=~\303\320\274\243Rc=\010\315\377=G\256\364\275\357\353\371\275mI4\276z\375\262\274Z|;>;F\n>!l\002\275%U\031\276\032\032\333\275\213h\314\275T\004\014>\023\354\314\274\177\035\307=\220#\022<\033\316 \276G\310\020>J\211\262\274v\001)\276\233\266e=\377\033\301\275\323@\027\276\217X\027=/\236\016>;d\250=\356{\275\275\3317T\275A\342\230\275\177\006\036>\014k\350=\202\001\306\275\252\032Q\274BB\345=\344\002K\274\235\353\n>h\327\027=\320\242b=w\277\\\275`G\214=\210\2670\276\210\271\316\275:*->3\034\355\273\236);>)\000\204\275\343\313\036=Z#6\274&\267\014\274q\257\365=W\215B=n\373@\276\255#\030\275n\2029\276~\216\032>E\313U=\370\311*\276xk\005\276k`\222<\204\200D=p\250\030>\312\2474\276\225\255\216<\'it<\330-\022\276\357\370\">\344\350\211<\244\2514>\216\017\020<!\263\036\276\274\270\372\275\340\353\000\276\233p4\2763\205^\275\030m\247=\351\242\037\276!{<>\n\315>\275\200\374\316=`\305\217=S\\:>\324\342\t>Jq.>\375\035\362=\3761!=\357\267@\276M>P=M\225\202<\201\025\340=\302\002\205=\240\265\371\275_\016p\275\336\311\004>\232\004\324\274\213\361\217=#\316.>\221\237.<;\353\331=\026\233\267\275~\3327>n\376\023>\364\367!=\237\206\252\274\302s\373\271P\343\003\276A^9=\214X1\276\317R\257=\263d\370=\034T\020>\246\3245=\206\247\034=\330R\014\276\220\376\r>\322r\014>k\265\304=w\323\275=\037#\227<f\007\244=+\\)>B\327\027>\007\357 =P\272\037\276d!\205=g\336\250=\220`v\274\331h\242\274%\333\370<\026\237\301\274)\355,\276\231\t\037\276Fe\251\275\374\0242>\361\252\201\275\257\0214>\351\0341>6t\212\275;\353+={g\361\275\300w_\275H\372x=\037\361\016=\246h\261\274*\316\336=\255W\353=\225g\016\275<\242|=\260\324\372=*\271#>l8\372=QZ\343=\355\t\260=\036\350\311\274\344\251!>\240w\261<\316G)>2\220(>\t\215M\274\305;,\275\275\326\370=\n\254\203\2748f\217=\026\034\222=\235f\217=\341\0241\273\027>\365\275\0378\251=\010\201-\276X3\007=\224\032=>\304\316\'>\200\260\366\275\027\340?\276\277\006C<,e)\276\'\373\253=\351\320\364=F\210\330<[\375:\275\376\235\260\275\333\321\205\275\250\303\024\2743\232\245< \367\334=ran=o\276\022>\3439\014\276\320\020\225=\031\257\t\276S\014\206=\363\025\222\275\373\300v\274\005>\323<&\300\260=\370@\206\275\300\3732>x\371 >\177\016\333<x\246\210=\201\314\016\276@\246\301\273#\303:>\327\207\332=\326\324<<\264\262\352\275\310x0\2768\260\022>\370y\013>\205\206\232=\037\242\310\275(\304>\276\341\352\312\275Hu.>\031\036\341\275L\311\324=*(->N\343\017>\002\206\010\275\213\273\362\275b<\r\276\260\035\227=\\S\211\274\300\220F\275\230jM=\006t9\276\253O<>\"\331\201\275\200B\031\276\373Z\001\276\010\007\032\276\325%\021\276f\206<>)_\302\273\317%\324\275\301\204!> 8\316\275B\203\013\276\003\346\244=\373\225\034=z\234\224\272\265q\220<\224\272\213\275M\\\233\275\315\263_\275\317\256<>\335\232\371\275\334\013\026\276P\270\'\275\"z\331\275\357\313\300\275\027\343\025\274:~\010>\364\307\326\274m\373!>1\033#\276U\200$>n\325\272\275\230%\305\275\262\227\004\276D4\274=\223\333\022>\276\206\353\275Ru;\276\313\322\267;\323\334\374\274\206<J;\331\004F=\260\333M\275?\314/=\016\r\215\275\234\317\300\275\035\224\016>\006\002\377\274\202|$\276\353\001\317<\233\030+>\242\025\036\276\366\203\304\275\206\014\304\275\000\"\351\275\247g\221\275\002\273?>\r\007\214\274\333]\362\275\314\310\026\276\325\234\223\2750\320\304=\327\227\017>d}\364<y\244\301<\340\363>\276K\217=\276\242p\320<\244\237\007=\342%\350=\336\251\335=\2571\005>\nW\">\3330\243\274\247\030\001\276\330V\036>\016\2468>\345\025=\276\255D\016>\322N8=$\274\037\275\210!.\276\020\207\366\275A\233\270=\217\014\000\275o4\272<Y~\265=\177G7=\276A\t\275s\022\005\276\220xT\274\304\242\374\275[\325\235\274e\023\347=\000\300\017>M\213\203\274t\322%>\r\324\310=\341(4=\271\030\300=q_\225\275<\024\013\276\352\323V\275\2133\336=l\354\204\275\326D\272=\211n\327\274\355q\"\276<O\037>\334\277\375\275y\371@\276\t\227\202\275\316\035\031\276\251\202\243\275\021\324M\275\251\375.\276\001\313\303\274sw\335=\020o\006\276Pq\232\274\321\021\002>\343\342\233\275\342\225\322\275\224\247\350\275\204\312\014\276k2\260=\314m\003\276\320\216\356=\357U\342\275\006\365\306\275\317o\026\275\267\271\216\275\260\034\231\275\3256f<\034Y\301\275\312|\t=\025$\324\274Y\365\006>\000\270\033>M\230\306=\360\376\027\276\313W\213\275\025\274\035\276P\266#\276i\035\260\275\206t(\276\227r\333\274l\350\032\275Zan\275\315\366\005\276\232\272\360=xe\005\276\320\327\006=\017\257\267\275\227W\211=\204\253\273\2754Z\037\276l\222\245=\223|A\276\341\271\007>\034\227?\276h\262\323=\037)Q=(\3456\276\215\037\303\275\030\003,>\234\032\211=\240\370\000\275\005\2062>\322\313\354\275g;\263\275\340>\317\275\303\356*>;\251 >\354d\t\276uc\351=/a\300\274\260T\020\276\337\207\261\2758\3707=\262\307\370\275\0039\374<\216\335j< \273\250\275\022\026\200\275\2611\204\271\350j\225=\375\362\006\273E}\204;0):\276~\272\023>cO\205\275\353\016\037>r\034\353<\372&\362\275!\323\001>~\344\345\275\242G\377=LI\326\275?\3466>\010\036\027\275\257~?\276\361V%>N\021{=\353:\250\275\353\363\322<\277\347H\274\014|\341=\3069\372=s=\337\274\227\023\237=\270\255@>\324A\031>\215\252\340=9\227\200=\241\264\007\276W\0146\275\230\001\330\275\014g\333\274\2154\001>\376\213\204\275\356\210\322\275\315\014\021=\253\003\360\275s[\337=q\320*\276\226y\364=B\274\346\275\230$~\275>4!>H\263\013>\200-\240\275t\373!>\347\206:>\251\214\264=LG\224=\034{\005=\224\033k=yy=\276A\225\255=\246]P=j\311\227\275t8\223<\206\270\204\274{\n\"\276\005`f==\245*>\t\245\304<SVa=p\351}=H\023\024\275\201\353&=\213\254,>\306\375p\274Y\260\340\275_l7=%S{\275p9\350=w\231\034>M\313o=\350\372\272\275\005\\\256=\250T1\273\022\316\001>\213\214\235\273Coi=W\232+\276\330\2130\276Vv\034>\240\353)>\370Z\245=\221Y3\276~\253\224\275\232\214M<\345)\275=\374r\014\276\326\206\226\275\321\035\036\276\336\270Q=\217y\031\276\201\350\300\275\256s/>\376X\236=>\366H\274HB\256=!\226\021\276\360-\357\275u4\261<p\335\250=M\323\203=\020W\212=\342R\227=\004\027\303=\360\315\217\274\254\023\203\272\275\014*\276\tt\201\2755e\351\275W(\304\275\342\314\256\275p\314h\271\260\355\010>\202f(>\250a >w&\351\275l\227\324=\253\204\313\275\277\000=\276\220/\036\276E\265\265\275\275\035+;\"!a\274\264}F=z;?>m\246\227\2743\232\352=4(\320=\325O%\276\261\036\223\275\rI\020\275x\335C\275\t\007\341\275\312\363\031>\346U6\276@\347\020>\357\336\373\275\204\0256\276\371\007\031\276\013\321P=\t\006 \276\357\001\341<n\202\334<6J\013\276\370\373\031\276\322\264\373=I\000s<\263\0374>\n\361\260<%*\026=\221.c=$G >\246\276\345=\213\232\201\275K\217\233\275[\316\351\275la\013\275-\334\n\276\206\345\013>g\366\266\274\"Q\367\275\223e\363\275%\013\372\275\240h\341\275\"\245\201=4+\034\276\000}\370=\331\"\352<>\320\020\274\211e\035\276\255e0\276\335\022\033\276\244\310\027=\257B\345\2759\323\306=6\201-\276d\235\213\275\210\333$\276[Z\200\275p4\263=x\020/\276F\r\253\275\323{\257=\207dO<\234\321L\275RR\236\273y\3123>D\3406\276\\9K<\274\203;>N\003<>\026|<\276\275N\341<\357n\260=Z\0263\276\306)D\275to =\205\215/>\260\313&>\034\354\230\275\313\242D=i\203\234\275\017\2423>\275G&=\274\2304\275\022\377\240=\032\032\356=\327\2373>\332U\322\275\324\245\345\275\375\202\227=\251$\355\272\211)\321\275\374\333\304=\350\263/\276H\036\n>\024\244\270\275yy\031\276\314\272\332=\213n\321\273\272\214\317=\244\256c=xD\216=\212\316\275\275M\377!\276\374j#\275\375\362\n\276zf0=\367;\013>\357\337\207\2758\'~\275\030\341\006<V\313\310\274(\3179=k\215\035>\231O$>\275H\371\274\257\375\261=z\031\351\275Ez\375=\204V\210==\354\262\275}\037\256=7\313:=\334\316,\276d\027\'\276g)\003>Q\364\025\276y\373\234\275p\315)>\310n\007>\332\002\'\276v\'O\272;M\230\275\363K\334=\254\377V;\257\226\372=\205\352&>\203\233\256\275*\"1\276AqQ=\364\370\026> q\350\275\345\336\314\273\0063D\273\255O*\275\210\264\357\274q\357\002\276\216\013M=\254\007\316\275\207\200\241\274\t\264\177=\354R\276=\267\244\017=\253{\345=\333\027P\275\341P\000\276Ol8\276\r<\250\275\377\031\025\276\037r\361\275\202\201\027\276jc\324\275ME\374\275\003\264\200=\357\t\000>\271S\306<s\310\245\275~\2040>\325\031\362\275\031\356)>\306Z\356<\257\250\215\275\203\306\005\274{\216\002>\035z\034\276\371\363\315\275\274\332S=\352\206\246<H\222\275\275{\257\322\275Qi\237=\233\320\301\274\344r\344=\370\265W=~k7>3\213\304\275M\201\345\274g\3134>\232S\263=\264J\033\2750L/\276Xx\037\276p\271\005>\374X\016>\257\260\003\276\025\222\246\275rk6>\245\203\007\276~\201\351<\236\326\335=\315\0067>\274\2554\276\207\021+;\205X<\276\025\237v\274\240H\t=\0134\306=\221e\276=YB0>\250\251\267\275\3632\240\274U\253%>l\033\274\275\361\004\014>\027\3445\276\250\002?\276\337\370<>`\261\202\275\243G<\275\326\003:\276\355[@<\013\023/>\376R\213=Q\303\006\274Yr\303=q\210\362\275W\271G:sp\246\275\037\001\010\276\327\361\273\273\227<\361\275H>\210=$4\362\275\356?\221\275\245\262\367\274}\347\344\275\375\353\256\275\310\367\344=iq\246\274E^6\276L\334\245\275E }\275@\301\024<\030\241\000\276Q?~=a\265\034\276\202\"\252=!\343=\276\325\000U=\330\204?>\212\213\003\276\366/)\2769$\263=*\0174\276y(\365=\3152\303\274\230\262\030>\"\020\320=\023(\344=\214\373\323<Es4>6\337@>\272Z\355=c\315\024\275S\014\276=.\2030\275\330\265\373=\370\272\233\274lp\031\276}\034\350\275y\n\031>\036\312\013\276w\024\244\2752\265\014\276~\254\242\275\206\312\371=\26766\274\346\272\036\276\366I&\275\254&v\274\226\235\034\276\262\3259>U4\217<I\215!>\233ic\275\036\355\315\275#\036 \276\020\036\260=X\005\001>\3635a=\251\342A>\'\023\033>\337/\234=\323b\202\275\222\\\202=,R\322<\332\350-\276\300\003\341=\243\307y\275\200\027\033>C\014\226<\0204[=\\\234\347=\034\366\340=\211!\027\276\321\262Q=_\250\216\273Tw\312\275\326\n2>\351\245\243<5\377\205\275\247:\237=\275(\326=\306A\207=\325sY\275}v\235\275^\220\323=5\245\'>\311^@>\312?\037>\245\315\"\276\206?\336=\304%\376=\375\242->\223@0;\357*\262\275\003\033\262=\022#.>\373@\022\276B\304\020\276\255a&\276\364W\314\275\305\373\231\274N>\311\275X*U\275P\361\266=e\331\341=\363\036\336\275Q\013=>%\311\035\276\275R\226=\307\204\244\274\032\321M=\333\2015>`3,\276\210)\217\275\225\234\\= \276d=\024;U=e\021.\276\367\335\377\275\223\273/\276\372]\305\274\275}:\276e\253>\275^B\322\271A\032b\275\335C\026\276\373l\213\275\255~\004:\233\000\224=\3464\351\275V5\325=\372\234\225\275\002jg\275(\'\374\275\310\345\234\273\317v\005>\350\014\252<\206\216\037\276T\026J\275\324\027\305=\331rA\276^\031\237\275\324\036\352=\021\021O=z\213\017\275\245B\'>\220\322\223\275S\270\000\2762\310\214\275\006j\245\275b\222\341=\203Yq\275\224\016\t>:\032\312\274m?\201\274\225J\374;\000\302\251=\276L\365</\016\033>\332*0\276E\216\262=\'\030\r\276\304\346\022>-\371\265=C\310\034\276\033P\346\273\013\302\354\275fK3>\314\265\257=q\t\307=e26>\013\236-\276\275\360$>\344\030\254\275\267{\241<\215\265*>\3144\330<Hh\n\275I\"8\276\000U\274=\270Mi\275\202\035\'\276\364\242\345=\3159\016>\266\244\027>Yr\t\276Zx\315\275\335\325c=S\2521\276FvX\275\200\0174\276\265\2568\276\307\376(>\356,=\276W\211\035\274\371S\212\275\241\037\016>\350L<\276\375\311\014>\236\320f=i<\346\275u\227\352<8\003\002\276\273D\016>\270j\277=\001\346\316=\032V3=\275\352\322=\237\314\022=\352\332:\276\3530\316=\204\325q=\"\035\314=\002-\010\275s\34069w\372\"\273\227\024\214<\211\337\212\275\304(R=\030\324\232=No4=\260\024\252=\003\240\261;[\017K<-\0249>\024\245\312=\302\"G=\317\"f\275%\r;=\322\275\213=\351J\254=\006\343\025\276\316X\260=nK\215=\021\305\273\275\353\216\322\275\031\207\344=\343\321\306\275\257\347/\276y\342\333\275g-\034\276i\020\014>\244\2123\276\362\255{=\310\000(\276uW\023>\000\346\035\275\355\226\240\275\2749\337\275\237\373\214=K\326\033=\006\203z=\271\027\232\275\202\353@=\345?5\276\253\361\017\275K\365\355\275[W\235=Qn\363\275\2109T\275nW\261\275\2034\250\274\264\000\034\276\232\215\336=\345a\022=\005\272\214\274w\2540>(\212\305=\307\355\357\275\300b?>8\333\362\275\3453\370<.\000\360\275l\334=\276g\233\351;9\0365>qZ\273\275Q\034\351=\237\3424\274{#i=J\2777=\020\213\365\274it\317\275\326W\313<\201\335\025\276\025\375(\276Wm\235=\037\0003=\254\301\225=\312B\274\275D\230\320=N]a=.\250\262=\315L \276\207g\261=\213}\026=\217\037\006\275SG\371\275r\241\263=}\203!\276\316/\027=\014\'&\275Z\266\014>\n\375\217\275\035\214\212\274z)2\274b\216\255=\220\036\032\275\224%\242=\327\247\260\274bv/>\233c\037\276\021l\355\275D\272\214\275\351\3175\276*\025\'\275\376#\270=\242\331->@\006\231=>\004\r\275$Q\341\275\243\272\304\275\037\3525\276\245\361=\276\233!\013\275\302\'\001>\243/\351<E\035\324=\266\2501\275\3272\232=\201\205+\276j\237&>g\025\246=\260x\013>\337Q\311=\3217^=x6\216=\371f\222=\364\256[\275bgO\275\212t\332=\364\344\031>\251\306\336\275\373b\212\273\370\t\036\276\006S\333\275\3130\213=\000iy\275C\3519\276\006>\316=\225\251\374<{s.\274H\351\356=\323\254\217\275\371\220#\274\330\313@\276\252\222\014\275\026J\033>\026m\234\271\373*\306\275 Tt\274\346J\333\2748\257\367\274\303\314\002\276\211\002\255=1\2530>\257\222!=\335\351\362\275\r\276A\276\250~\036\276iL\354\275r9\307\273\t|\233=vo9>x{<>\301\220\025<\271\2569\276\327T\003\276\3000\t\275\263D\024>c\2444\276\306\332*>\333V\265\275\300\300\256\275\004\022\013=3\037\357<~%\201\275*@%\275.\\\024\276\266\377\025>)A\r>ey\314\275\037X\331\275\224\275\320=\255\t\254\275\245\0316\276\\]\247\275\356\371m<\256Z\236=JL\322\275YX\276\275b\002Z\275\227\037\332=\230\352\336\274j12\275\300K\233=\"\242\357;\177\016\016\274\307\\\242=\206\354\316=\212d$\276\332\306\036\276\031\210\311\275\340Q\255\275.\003\275=\'\010\216=\265\217\361\274\343x\017\276\245\327A\274\342\312\363\275K\352\307\275Wh\027\275[u\334=Ws\344\275\337\370\222\275[\257.\276\027\221z\275c\177\230\275hl \276\337\t\245<\315Vb\275.y,>6,?>\3144!\276\346[^\274-\327\034\276\371\312\313\272\223\326\264=\352\357\036\276\357\007O\275K- \275O\241I\273\r\370\037\276\347\374\360\275\2552,=\3506\342=\271\361;\276\rC\244\275C/\243=\231\352\215=k\306\224\275:\263\357\275i\251\023\275\024\263\201\275\002\230\027\276\235\304:\276u;4\276L\024|<\021J\204\274\032 \n>-Z)\276\236d\006>\226\231\003>\215s\256=\271\254\215\275\354s\000\274SIY\275\207\251\n>\273\224\022\275\265\212\'>.t\026>\3179:\276U\305\035>\340\014\313\2751\331q<\017l`=\023*\334= C\213=\240\322\250=\330\315\233=\n\271\326=\2571\331\275\357\3548>\256%\006>5\271\274=\323v\377\274@\263\307=\214\016\034\276\007\315\250\275\271\255K=\211\\\013\276\r\002\037>a \276\274G\353\334\275\301U\r\276+k5=\206\336\313=*\257\025>\003j\032\276\245?\332=0<\360\275eM\322=\3414;\276\021\333\202=Gj\006>\352\367\273=H\327\321=QM\363\273\016\364\357\275\232*E=\301\026?>Z#\025>u\270\036>,3?\276\220\275\t\275\223\263\335={\205\330=\336\002O=\264\203\004>\345/\223=#\353\214=6\256\301\275\313\344\334=\346\0213>>s\202<\210\3379\276\344\320\201\275?Z\216=\346\023\353=/j4>\267\251\210=*\217\006=$\361\236=\352p\335=D\036\'\276#\357\t<\001/r=\310+\256\2721\271\273=#8\347=\004\177\033>?\346\275\274\205\004\304;A\246\321\274\252\023\304=\373\267X\275\006&\016\275]\363\351\275\010\022\244=9%\262<\351A->/\300x=\264\201?>\032|\257=L\227\326\275%!\026\275A\"K=\235\024\035\275\310\251(\276\3762\306<\220\010\207\274<$,\276\020\360\226=\033?\253\275\303[\232\275;\0011=\373k;>\220\337\327\275\014\017\351<\306\324\035>\036\375\321\2744\236\373\275\365\255\230=8Y\236=\342\3620=\235E8=w\2638\276\231\022\002>\266\243->\312\021.>\233l\265\273\323\321\374\275W\327\017=M\020$<k\205\201=NS\264<\261\261\006=\377)\232\2758j7\276q\243\251\275\005\210\'\276|\332\376\275\204\217)>\":\235\275\360\262\327\275W\246\202=\332\227-\276ce\236=\242\364U=i\0308>\0109\023\275;\330\027>\216m\237=}\031\027\276\205\022u=\242\221\002>O\372\231:\\J\240=\235\262\271=hd\303\275T\234o\275\033\336I<t?\025>\017@\362=gK\260=S9\336\275YW\233=\300B\325\275?\367\201\275\270p\316\275\211\220\">Z\3711\276\232i\315=\312\036m\275}3>>\014\227\347;6\362\022<6I\243\275Bzt\275\222|\034>\024\242\207\275!\r\370\274\0345\021>@\352\316\275\246\204\326<\263\030\r>]\257!\276\3422+\275l\321.=ap;\276\017G\367\274\004\316\037\276\230\377O\2754\367!>\271\325\027>\350\256*\275\341\231\n\276\343\226\267<\300e\033<.x\216\275\332e\033\2741\017\213=\270\004\222\275\010\372\213\275\377I\357<\215\345V=\324\343\335\275\337\"\036\276:R\215\275,~j\273\207\227\263\275&\305\373=\247y,>\311\\\023>\022$\315\275l\355==\033~P\274\214\3237\276T\003k<0?0>%\177\310=\nF\347\275\355B\336\275\257\002\003>e\304\212=nf\026>\r\251/=)\240->-V\016>\366g\'=P~\273\274\377t\353<V\236i=\274\363\310\275\036\235\225\275\333\362@\276\336:\302=M\273\203=\206C/\276j\010?\276V\300\303=\240\312`\275\2144\365\275\034\270\020\276\340\207@>\275F\351\275\250\216\017>\366)\004>\006c8\276\005\220\334\274\n\001\032\275\036\t2>\333.\"\274_#\217\275q\354\302\275i\323\240=q\317n\275FD\310\275\305^\004>\030\265\005\276\273N\373\275\037b9=\306\006&\275\362@\205\273>\234\352<\246\005>>v\204V\273jf\261\274px\375=Kh\032>\211\244\336<b*\341=c\271&>+\311\005\276\250n!>ja\243=\374,\316:\005\336\230;\324\005\020>F\217F\274\263\222B=\202\344\357=\033\235\357=\314+\026>\023<\255;\"\2526>\365\235g\275\345\210\203=\377\254\252;\3475\031\276\327:\266\275\376\t\216\275\256J:>\274\030*=\242N=\276\335P\241\2751\277\020\275\322k\357\275\316\3068\276\307\023\341=\336\027*\275K\002#>\262\211\247\274\325O\014\276>p\257=k5:\276\037{1\276\220\035\021>\200Ms\275\357e\014\276d\323\344\274X\342\035>\301\370\005\276\236\267D\275\245J\321=N\364\232=Q1\354\274\246$\303=\266\265\010\274`;\243<\020U\020\276qw7\276\2065\247<\225\026\344<W\214\002\276\275y3\276\342E1<\321\337\263\273\245\rz\274\211\256(>\207\261\235\274\222_\005\276J\370\016>\222\274\202=\01403\2760p\023>g,\342\275\361\202\001\274\304F)=\233\370\370=H\n\313=\257F\275=\264\303k\275\324\303\352=K\232D<\210\025L\272\331m\002\276|\260\342<\2652\216<JT{\275\361\300\025\276HF\003>E6\271=\226\366i\275#\272\'\276\267\005\030>\344H\367=\0218<\276\030kP<p\211\217<_ \020\276\270\002\363=\037\253:><\374\'\276K\2048\276\367\247\004>c\2469\275\350v\313\275\345\033\001\276[A\277\275\3620\354\275S\000a\275\322\253\252\275\353\255I=\1772\264\275h-\321\274\261R.>0\337X=|o\313\274\247\222Y\275\320\021\021=&\337\373;\016\010\032\276<\205\010\275l\007\262\272#\223\037>g[S\275\365\224&\275{\267\013>\013\347\037>^\2041\275\t\215&\276\\\313\376=\257Y&;|\351\007=\373\234w\275\034+\331=UM\035>\302v;>\2041\r\276GR\031>\365\327\310\275\340\275\334\275\223\272\035>\022\010\004\276Y\177\222=\231;7>W\033\017\276#\362\'\274\314\026\022>%\357\374=)\346\241\275\2437F\275\001\\\241\275{A\223=\000\362\236=\301}C=\334c\037\276\361\360\300\275\236\352\343=\020\216A\276\234\3778\276\257og=\n\350\222=qT\227=\217\377\024\275\035\325\030<\313q!\276\354K\035\276\315\207X\275\030my=e\022;\276\277\'\221=0O\\\275\356\310/\276\023)O=\303\3672<[\374\372=\030=\341=\214r6>\377\350\260\275]\240\366<l\247\"\276N\216\027>\257\3548>\224y\230\275\335\270%<\223\300\023\2761\207\374=z\007?<@\351\r>ea\210=\374D\231\274\002\251\034>\343\345\311\275\355\255\225\275\325\3145\275JW\261\275<[\327\274\321\337\000>\316\3563>$\226\246\274\273\351\273=\r\276(\275/\263\237\275u\002\014>\270@!\276h?\270\275\343.\307\275\335\310\341;\262\210\021\276q\271\302=\342\242\037\276.\261\272=\212H\343\2749\010\332\275g\326C={\217u\275\265\253\354\275\246;\004>_\335\220=\214\315\202\274p\254)>\336\224\316\274P\2455\276\221+J=u\263\177\275\332\341]=\230A8\276}k\r\276\031N\271\275\004z\001>/bz=\316\2663\2763$\330;\343?\233\275g\253/\276\327R\237\275\361j\036\276\177~\354=\022\340\203=\001-\010>\342f%\276\211\324\"=\024\203\000>\245\036\365=\265\231[<\347\252&\276\313\300\247=\367I\'<a\247/\276\316b\002\276\017h\302<Z\000\023=\351Z*>\247kA\276\307\364\344\274\355\210\003\275\326\251\026>\002GW\275\322g\313=\023\326i=v\0061\276\251\233->\255\3120=P\233!>M\322*>p\267\266=&=\036\276g\0235>\257\320;\275\301\364c\275\177e\010>\214[ >0\334\025\276\037\t\006=:*\264=\014\205\241\275h\266\371<\300V\372=\340\355\224\275RG\304<C\234\213=\252G\001\276n\2669=\243\354\306\275\344\300\032=@\026h=\253\236\305=n \267=\271=\332<\257S\261\275o\376\335=Un;>\264$\251=x\201X=u}\316<\016r.>\002\325\241=\220\300x\275#u\">\375!\323\274\250\366)\274]Q\027=\'T\343\275\"\304;>H\242\373\275\255\260!\276\260\212\254\275?\261\014\276W\371\336\275\365;\006>B\226\'\276\017\006\036>=\346\r>.\"A\275\216\365\010\276\372\216\016>\263?\017>Nh+>oV\202=)\030I\274p\343\357\274!\353\026\276^\335\230<3\010\n\276\246\365\316\274\310\300t\2743\342\316\2757GT=U\364\273\274viu\275c\254\217=\266\026\271=\\f4\275\310\334\325<6\300\352=K\217\333\275\353\3173>v\025\231=\347i\002\274\203\006\270=\247\360\034>\032\254K\274!\232\240=\032\2155\276\271k\252\274;\227\265=\206\257\240\275\345\357\252=\t[?=hm\'\275\210U9>\323\372\017>\272\023a<\367\2625>\221\200\324\275\022\242\275=\211X3\275\023uq=\234\251\370\275\022 \365=\353\340/>\211\214 \276Q\212H\275[\236\345\275\355a+>\350W\365\271_;\007>\236I\347\275X\227\275\275\302`\232=\034\001\306=+\246\031\275mF\364=\031\210\364\275\361!\001>\210\370\252=\225e\233\275\337\371\025\276\357\2055>#\266\265\275\207o\010=o\3608>G\026>\276\220\264\315=p\245\034\276\336a\307=U^?>i\217\020>RJ(>\"\336\377\275\241\221\226\274\025\341\272=\253\337~<\305\330\210\275\364\301\323\275\363\201\031\276\032J\t\276i\001\025>\367)\235\275M\212\021\276\314,\213\275\034Yb=\245\362\026=Gn\017\276\037\"\t>\352\027\347:D\264\260\275\300\276\016>-\025\005\2768/\366=\006\0162>\232\246>\276\274\365\261\274\362\025\233\275L[R=,\355\363\275\"\326#>\226(c=xv\274=\263\r5\276`\366\020\275dz\226\275QZ\210:\276+-\275k\260\211\275\325\315#\276wM\032>#3\245<\210\373\304\274\262\300\221:\206\250\240\275\314\'\034>\014o\'>\377\266\022\276\346\354>\276\22303>p\307\347\275\253\371#\276\245D\305=\207\"/\276\304+F\274\350<A\276\027\211\037>|/4=\222\275\371\275~\317d\275\022\363\001\276,:.\276\n\276\020\275\305<\332=&\316\340\275s\3141>S6]<2\030\274\275\221\267\002\275$\027\344\2750\256\002\276\2159\236=\215f1\276Y\361\r\275S\264\035>\276\315\236\274\006&%>F\222\274=\325\355\324\275fr\000\276\307k7>:|\263=\350+*>\230O\260\274\033\335?\275\031CK=\364\324#\276\347\035\257\272<\270\023\276\210\366\235\275G\374\007\276.\2276>\315\024\207=\n\246\333=\r\231\036\276\324\256\361=\256\300\322=.X\032>\220a/>\264\254O<:\003\216\275\3344\336\2745Hz=\213\360\005>q\t\377=\252T*>F\266\014>\367\342\351\275\3044H=/\027\353=\232\\\233=\375\313;\275\220\316\347=\004/\361;P\217\336\275\266\266\252=q\250,\276\227\265\232\275\'\362\324<C\022\254\275\316\300*\276\352t3>l\003#>qv\266\275:`\354=\322\255\'\274\275\347*\276b\031\215\274r\210\340=s\014f<\374\311\026\275\022\007\365=\212A?>o\215>\276\355\350\027>\"\222)>\370(\344<\371\260 \276_B\222\275[h\230=\233\346.\274\271\023 =<]1>\254\313\346\274\364h\032\2769R->\244m&\276o\277(>\331\272)<h\341,\276\316\214F=VN,<\346\236\347=\340\247\375\275\367\001\362\272\341V\353\274y\214\'\276\"y\203=\230H\257\275\014\363\230=\232\'\025>#\223\330\275i\203\321=SR\016>\233\323*:A\024H=~B\372=}\024\237\275\203 6\276\375\023\321\275\346\371\357;\037\275\301\275oB\324=\315/H=\260\005\344<\264\205\001>\360\231\000\276\311\031-=\244\300!>\"g$\274\007\317\273<00\367=\237G\272\275\324\000\001>\002b,\276\014\030\036>\010\311\246=5\274\026>\216\'\205\275l\321*<\360\330\240\275)\233\252=\227B)\276\250~?\276\363\214\375\274\312\302\r=)z\272\275~~\037><%\355\275\010\321\252=\220\235\301=T=0=zR&:\221\371*\276\357\272\005>\303\013-\276\2747Z=\\K\324<(\345R\275fo3\276\006\322\023=\335\217\322=.\003#>6\357\302=\365\2724\276\252\332\367<@I\027\276n\270\277\275>\\\236=\372\0300\276\335\341-\276\374\275\027>\204\'\371=\361\014\206=j\235\371=\016i\006>\222\013\257=\351\3432>\264\366\313\275\r\217\261=M\021\034>\007\355\240\275Ca7>\tC\032>|**>\205\234>>\342y\231\275\262V\021>G \310\275\362\270\251=\230[\305\275)\005?\276\007\242\355;;\224!\276\317\373\026>\335\034.\276\021Q\035\276\356\260>\275\021j\342;1\207\361\275A\270!>\254y\006\275y\217Z\273\366\221-\276\313\275\010\276\243Z\260\275\034\220\026>\341\207\033\276\t\346\334\275#\355\365\275\205\241\360\274\203l?>h\300>\275t\254<>,\271r=\014!6=|2\205\275\361\023+>\237\020A\275YR\302\275\321\312\303=\310\324;\276\325\270\'\276\314\237\023>\351\022\256\274\206\017v\275\014\360\361=\366\023(=0,\241\275\265_\002\276D\275\334=\016\317\004\276\t\374\261=\2168:\275\321|\237\275\342\206\300=\306Qg=^\336->u\266\353=(\'\007\274\247\3117>D[\213<\206\210\262\275\326\033\241=j\302\345\275%\347j\275m\nB>c\347\342\275\214\217\r>\261\253\231=\207\350 \276Z\r\004>\215\354\371<\3255\226\275\333\300,=\3011\300=LI\003\275\324\0271>\202-r\275\223\351\264\275\016\201@\276\314}A>\316o\312<\236\322\301\275\324\306\336=^.\302=\333\201\335\274\266e\255;s\364p=\3146\245\275@\234\013\276_\0318\276\204\272\245\275\262\270\330=\346\240\310=F\375\024\276f\377\361<x\276^\275\367\300\245<\001{\271\275\034\272\242<\245N%>O\177\370=\335\243\232\275\317F\007>y\353\355<:as\274x\363\006>\301!\023\276\243\2532>5\001:\276%_\267<8\222\014\274a\305\207<\217\2179\2765\316A\276\225\377\r\275S\t\014=\235G\350\275x\320\240<\030\375\214;\224<9=\207\027\020\276\275\222%>\025\201>\2764;\346\274\345EX\275K\334\017\276\375\240\023\276k\301\000>\367\276(\275\233b\345<\210g\377\275-`\313\275R\211\340=\322\033>\276\240\211\016\276\201\346\310\275$\257\230=\224v\274=,\274\247\274\334\3019\276\017\221$>\352:\352<\031\",\276\'\355\t\276\351\233\001\275a\'b=S\256\027>v$\207\275\022=\023\276\223\342\016>\327~\335\275I\214\212=\350S\211\275\023\206\024\276\247\205\021>R\341G\275r\303\r>\325x^\275\031\221c\272q\210\364\2745>\321=\247\246\306=<p?=\277;7=\265\223\375\275\203D\212\275@\277\373=l\227\360\275+\232_=\223\335P\275\227\224\367<x \021>\333\222\200=[\232\010\276\231\202\276\274\r\255H=\3512\r>\376\222^\275\025\001\250=\310\217\243=a\034y<~\231\200=\364};\275;\256\307=f\231\202\275U\320\035\2764\362R\275\272k=\276N9\235=\272\203P\2754]\241\275+\005%=\251\263\377\275\277B\371<d\307\226=0\254X==\037\315\274\036\342\021=\323q\300\275\334\233\001\276\263@\347=e\215@=\206\205\276\275:\034\035\275\376/\207;\323\222\\=\356\0312>\203Y\034=P\215\000>\371?\t=\323\351\233=)\207;\276\215*\315\275\214?*>\007\241&\2751\317\304\273\t\301\">\332 \321=\n:\200\275\006\235\277\275b\3714\276\000\235\001\274ze\313\275\225\233$\275;\371\342\275\332\3445> E\224\275\347X6\276\246\010>\276\235\316\023>\235\236\210\273\275\022q\275\013\256\t\276\'\t7=%F,\276)K\206\274O\215\013=\276\\\331\275\361\007\023>L\022&\275T\376\354\272\225\230\227\275\203/\036\276\207\027\"\276C\010\'\276\275\025\256\275\003`\273\274\204\374\000>U\212!\276\354M\203\275\275\206\360\2758\261\201=\037HW=\257\344\032\276\366a\036> \2735\276\301n+\276\034\312\207=\266\007\350\275\023Q\n\2754\237\347;\250\020\321\275?b\247=V\036\'\276|l!\276\013z\255=\264\205\352<1+%\275\276z\315=\034\250\001<7\217\002>\273\313\337\275\035\333\010\276\202?w=\031\013\224\275e\216>=\336\010\t\276P+\036>\000\267M\275\0170\364=\213\215\227<:\302\005\275t\0336>\272\0162\275\230\211\242\275\035\273\033\276\023M\000\276O\364\004\276D7?\276\324\322\014\275&C\372\275u\222t\275\335\304\026<\375\036s=\317\020\370\275\251\375\024\276\021\226\332<\334\246\025<\366\351\014;q\256\310=\210\244\346=Q\233\304\275\345z\007\276@\253\022\276\310F\024>\235g\031\275\016\204\233=\345\223\000\276\374\2569\275OR{\275x\367,\274\231\300\304=b\002\254\273\275\263\n\276\352\323\242=\220\240\374=F\207\335\274\376:%\276l<\303=r> \276\031{\225\275\000\360\026=T\3416>\351\367\270=`M\022\273>\205\317=gk\314\273_\361\261=\236\325\225=\033\377&\276\304\270\004\276\377\036#>\366\215\372\275\264m\215=Nw\016==<\372=C\310\035>g\330\014>S\370&\276\265\356,\276\\\037=>\r\004\316<5\256=\276\320k.:\006\333\336\275\310I\004>\276|Z\2755?\"\274q\200\371;\374\'\374=q\033#\276Rr.\276\325\213\210\275]{\t\276\020\376\t<\314L\334=\277k&>LH#\276!n\231\275\211\254W\275.\311\273\275..n\273F\371\223<\t\277\031\276ct\"\276\\\261\264\274\265\035\035\276L\013w\274\313\033~\275U\261\320\275U\256u\275t\0379\2757\2101\275\276z=>Q\306\245\275\314!3=\221\003\201=J\301\252=Z\223\271=\3702\351\275&R\005\276\361T\301\275\362N)>\211B\023\276\020\352F=BZ\345\275\007\245\322\273j\367\373=\032\216$<6\024#>}\0047\274\'\360\204=\350p\205\274\227\2442<\340\014\251= \244\340\273\314\323Q\274\323>\223\275^\3177>\334\n/\276J\250\310=\366{\034=\222\302\031>\254\036\332\275\tn\203=\177R\310=\302\212\217;\256\236\363=}\201\276=\375\023\037\276\231\252+\276/\250>>W\320\246=/\031\212\275\234)W=\254\031\346=\273\004G=\270\242A>\254\204\001>\377\3361\275\033\207\034<\327\003\340=\035\333\270\275|\020\032\276\245\234 \276+\266-\275\262(a=\375! \275\344\353\215\275\373\035:>)\367\007\276-p\006\276\t/4>\320\332\233\275}_\347=FT*\275\246\303\r\275\220\'\013\276\230\275\347\275FY\331\2713\361\360\273*\177\251;]q\357=A\230p=\351\263\302\275\256\260\370\2757\226\267=|=\271\275L\334D=\363Z\037\276\346$\301\275\205\300-\276\320\2012>u\252?\276\344\376 >\206\202\031\275\232\034\270=\t\330,>\023\302\024\276\360J\226=\3630\302\275\3477\364=\277-\354=\346p\225=\376\235\211=#-9\276`d\345<A)\377<2}!\275\370\342\375=\024\322A>\037Cy\275\010\330\016>\234.\n\276\236(\373=\312s\017=W\202\236\274\200h\'\276\361\207\001>\000D\230<\325\321\372\274\245\265\243;\261\365\241<~\256\255;\177\240\271<\3424\314=\023K1>\013T\232=\343\306\330<\225A\215=\335\371\372=\320\235\031\276\034w\005>DB\345<\315b\262\275G\0060<\332\323\341=\201\201!>\327tA\276\177\334o=\274\336\035=\2669\031\276\006\364#>Xy\350\274K\346\020>K\366\300=\371r\306\274\321\375\226\275\377\245\217\275\025G\017\276;\252\245=\300\256==\314\212\374=z\353\321\274\212\327\007\276\314\t\254=\271\244\014\276C\243\273=\267\225\317\275D\016L<_A2>\202I%>\n\263\245\275g\000\325\275\315\201\355=\301H\303\275\233y\n\275Kn\340\275\237\237\024=\325p1>\302\351\252=\224\3015>,\3230=\201\342\">)K\213=W\027\376=\336_\224=\260\025\222\275.\262\347\275\2453\212=m\366/\276\020\213\334=\0042\372\272\\b\321=\202\375\337<\034r=>\345\245->\2470s=,#\255\275\016.?\276\014\3616>\rW\"\276\3006\031\275>\267K=\234\377\361:s\256\241\274=\242~\275o\231\005>\321\354\263\275\\\035\266\275\017\234*>\300\363\'>i\003\203=\224\250$=W\2723\274\343\3208=:f1\275m\202.>&\232\341\275\275\213\313\275^\203\004>\211\205\275\2755\275:>\207\237\226=\342a\275\275K\226\357\275\221\224\300=\272\355=>%&\033\276U7\344=\271\227-\276\305M\270\275\367\320\332<0CA=`\373\230\275Bn%>m\257?=\246\n9\276v\375\022>\222\221\356=\301\252\022>Fg\205\274\207u\377=\222/\375\274\037\207\201\274\317}\025\276I\374\322\275\r\270/\276\260Q*\276\352\231\370=o:\273=r\025\341=\007L\022>\252\267?\275\n\346\202\275\364\031\025=\275\253\363\275\021\267\244\275\251\274l9\351\"\240\275\340\371\300\274\256\355\">\277x\206\274\263\030\036\276\256K$\275\252\367\347=\373\247\003>\212\266\377=\204\336\031\276$3\222\275}\222\211=\326V,\276 \303Z;\233\0334=\316d0>~\367)\276\007\322\037\276;\303\267\275\027\247\t>t{\271\275\365<\341\275L[\252<\307-@\276\222\213\256\275rYC\274<$;>\346d\220<\214\263\233=\315#\323\275\004\364h=\344\0315=w\241t\275$#\020\276\\\330]\275\246Q0\274\263\360d\275\037v\206\275\340\335\272\275\344(#\272vN>\276\226<\331=\020f\"\276Zc\033=\323\252=>\355:\216<P$=>\343\005\351;N\230\016\276\010\374\326=\272\020\\\275\304\205F\275\333\374\300\274\220\006\243\275#\252?>~X\022\276z\203\355\275\0062/\276\374\0243\276\243\264\304=!03>\014\3542>\'\301\206=v\353\370\275v(\256<\246\303\001>\362[\024\276\213\027\360\275<n!\276\336\365\365\272\333\275\253\275l\214\326<\376\364,>\274\001\340\2744\306\354\275\037\211\004\276D7.\276\234\035\002>\r\201z=v\275A\276\250\037\026\275e0\353\275\321\306m=\354\027\250=\350F\271\275\237\262;=\215\004\350<\013#\320\275\000\311\026>\263\024u\275\216\236\017\275\331\022\376\274S\003\n>\334T<\275\332S\256\275+\025\263<P\212\360\275G>Z=]\230#\276\361\334\350=*\270:\275X\340\037\276\224\247l=\221H\267=\035\2308\276\324\335\236\275\305s\021\275\346OL\275n\177\350\274u\276,\276\374f >\254\030\267\2704\334\311\2754\027)\276\370\007.=[\263\020\276[^\020>H\237\224=\216?\203<ng\033=o\314\227;\272..\276[\215\017\276\213\2142>\210\0025\275-H=>\000\326\007\276L\263=>\304\244\006\276N\324\341\274 F\233=\333\r\r\275.\242C\274\277\367X\275\270\022\352=x\226\264\275/M}=\255\216\'>\375W\274=\017\231\t\276\000>\221<\246\3352\276c\307\007\276,\344G<i3\\\275\312\201\332<ehR<\301\307\370=w\343g=\203\216\t\276\344\203\241\275+\035\211=\310\265\362=\351,\344<\354\020\316\275I\001\210\275n\346t=\036G\274\274p};\276)\276\035>\256\212e\272\355|\002\276?A\317=\246,j=\367\264\010>\236\006\021>\361k\363\275k\016\014>\200\253\003\276\305\340.\276xl\234=\026\021\014=\215\237!>\331\230v\275\213]\256=\345\273z\275S\243\014\276E\206\323=\351\230\315\273q\211\327=\027p\033>4\306\t\276\265=\262\275$h*\276\201\260$\276dU\332\274qG\352\274\234d\237\275\346\253\200=&l\241\275\335\004\013<\331\030\235\275\350l\027>\360\304\013\276\212\212:>\261h=\275\022\256\342\275\233G9>\032r\274=\034\020a=\221\361s=R\276@\276\244\322\017\274qm6=\321\201\337\275A\222}=\3652\n>\274a\023>\000\020\257\275;7\225=`C\316\273\\)\210=\273\240+=e\344\235\275\351\341\030>\347\035\307\275\371)\270\274\0035<>\204/\004\276\033\201\271=\023q6>\227rg=sS\237<+\262(\276\347Oq\275{I\250<\213\240\341\2744\001\023>`\234\350\275u\325\275<\2723g\275\230\312\007>\331>;>`Y\026>M\237\267<\306R\202\274\357\261\310<\375R\311\275\013H+>P\033\202\275)\\\035\276,\346\314\275H\245\344\275\230n3\275Mk\017\275\255\236}=\274\231\325\275\315%\024>\223\245+>\203\273\373<\221\247\"=eS\245\275\022\274\375\275w\376\345=|\030\005>\277&%>\370\364\335=\356p\014>z\362\r>Wy\340;N\246\226=SR\020>\271%R=\346@\314<\031\277=>`_I\275\\p \276\016\343\305\275\231\324\264=\273\204\363=\203\361\014>N\356\306\275\326\272(>\261Wf=\203l\024>\367i&>W\303\371\275\231\034\302\275\245E\311=\261\371\342\275\nQN=\031\307\022>F\331\271<\3023!=\007 n\275\337\352\t>C-h\275\030\306\030\276 w\364=\345f\002>\031!\241=\245\301\250<v-\002\276\237\217\261\275\345\330+\276m\261N=w%\033>\002\234%>\026\356\274<\022\025C=n\346\355=m)\336=\357z-\276\317E\214=\333\377\010=\2341\354\275C\341\323=Y\320\031\276\312\271\016\276){\021\275\202k!\274\204PQ\275\303\341>\275q\336\327<\324\366\301\275\245\3161\276\026\"\203=\\\276\206<\245\3426>\021i5>\271\340\006<\\\246\304\275l\376\205;m\243\206\274 \267\301\275bT\014\276J\337\007\276\250s\017\276\256\325\271<\354\037\314\275\001u\024\276Ac\264=u}\331<a\251\036=,\373\\\275\373V\205\275$\177\212\275\276\247\277=\326\376V\275\2365\031>\301\177\243\274ys\023\276\254#\351\273k\245\311\273F\004\276=YI\354\275\206\2137>\177$\013>\202\001\001\276\234\311\374\274\344\345\316\274\247L\270\274\022\014/\275pa\027\275\014\317&=.#0=\261^5>\023\266\330=Ma?=\267\\6\275\370\2328\276\177T\343=\221H/>1\247\033\275\310\211\300\275\013\354<\276\223\2626>\310\361\353\275\013\361\242\275\3537)\275\034\364\337;\177S$\276\t|\032\276\260o\021>\221\332\262\275\227J\246\274\177@\256\275^\220<\2753\301\245\275\037L\337==y\017=\346\246\253\275<\271\032\276\271\035\033=R\233_=\016\257\323\275.\365\347=\322\203\237;\342\351\312\275\226\340{\275\362Zm\275\r\376\320\275\204\376\004=\231\352\013>Q\316\316\275]\234#>9\022\211\275\243\361%>\323\314\273<\300{\036>\177A\277\275=\337$\276F\224,\276cD\037>\347\356\026\276\341\332\214=\331oD\275\177o\033\276x\217\362\274Uw:>\'W\022\275l!\272=\355\223\211=\241Zv\275\344\201\314\275\305\035\022>\205\321\344=I\322\311=\374\215\210=_\3422>\002\277r=8\244\r\275\n\216\361\275\232\t5>\245\216_=b\3340>\332\223\206=j\3722>\357\367\035>\224\233\364\275&\\:\276\371B=\276\211E?\276\224\001B>\247r\317<\311\036\005\276%\325\n\2766\322\014\276^\315\037>\262\201\001>\020\307\201\275\227\302\t\276\030\210,\276\272\357\366\275V\361\264<}\0365>\336\2179>+\330\001=\350\347\r>\261B\372\275\307\373\340\275v}\274\275`\256\336;f\322\347=$D\364\275\277\216\226=\304Q\016=\376}T=p\364}=\207\014\027\274\320\354\216=\232N\031\276\322\370\265=\276{\314\275\033\027\361\275\375\372\000\274\321\365;>\204\030\030>i\251,\276\315i\013>4;\031=\024\202\034\276\332\307Y\274M~e=\270\003\025>S\005\247\275\312\335(>\201h\024>\340l\277\274%\327\354=\352\322.>\307\264\032\276?d2\2761\262\315\275\242\004\033>\223\177H=\367\014\262=@k\212=\344@\347=\033\216V<\362\350\246=4A\222=A\2174>J#\232=#\2039>}\366\215\275yz0\276\343\3569< \014\326=mn\000\273e7\017>\350\300\271<\331t\007>\345\2778\276\306J*>\025\221\303=\322fz<=\214\207\275\341)\031>\221l\373=\005\020)\276d\261&>9\277O\275 \266\262=\346\317\'\276\340\'?\276%\354\342\275h\262\250=\202~\355\275)\326\206;P\263 =\373\231\365\2751:\311<Sw\346\275\356\372/\275\2116r\275\243y\376\275\3070\027<H=?\276C6(>\371\t\365\275D\254\337:\215\342\302\275\221\016\203\274H\3531\276\244\344\264\275\337\253\322\275\n\215\351\273*\332\001>\314\217\016>x\234\200\275p[\260=\245\377\322\274\200\255;>\377;a\273M\211:>[=!\276\344\270)>\253=\013\276\216\222\006\274t\204\">\333(+=Z\267\234=\234\326\201\275\006\205\203=\327;\014\276Mc5>B\3038>\\\2706\276\002\177\263\275\010\0201\275o\276:\276\343\337%=\177\351A>v\rm=\206\353;>\360\000\'\275\024@\344\274\034\0006>~$\226<L\257@>7\2031>\376m\201\274\357\327\306=\002\0168\275Q\364\036\276q\213\326\274\tO\013>\343!\327\274\203\207 \276W\202\036\275\206q\035=b(\177\275g\222\225\274\033d\322\275\307\022\004\276\3449\346=T&\353\275dI\017\276\035\"\351=N\213\002<\240K\026>\310\033\027\276\010\353\223\275\250\221\303\275\343fy<=\201\305=\215}\000>\366\222?>\031s\350=x\241\324\27514+>\0242<;\204\003\035>\t\213\254=~b\005=A\320A<\014T(\275P-w=\340\276\350\2757\201\260<\027\324\2229R\022\210=*r\364\274\343f.=\311\377\334\275\221\t\311=\306L\272;\274r`\275\223w:=\312\311\036\276\353\204\355<\227\356\017=\004Ve\275m\351\030\275c\276\305=\255\260\335\275\224w:\275~E\363=\336v=\276i\336\336\274\254\220\201\275\275d/>\'j\240\275\343\037?>U\227\376=_\300\037\276\223\322\037>\314=f\275\030\2634>\262\007!\276N\006\343=\350\360\347\274\256\000\026\276\210\233\272=\306j\004=8v\330\273Y\311(\276<\030->\014\352e=\315\254\360\275\273\215&>\003\223>\275\267;\n\276G\306.\275\327\202?\276/\310\024\276\271+\034>\251WX\275\034\0353\276\237s\240=\301\204\020\276\276\r\236=\353C3\275\303t\017>\377Q\334=0\031\256<\331\247\350\274\303\306\"> Jz=~k\013>\276\346\271<\265_\266=\317\032\200\275\271e\336\275\325\263\226<\262T\250=\034\020i\274\007\341\333=\226J9>}\031U=!\220\347=\"\021\232=j\017\323\274\031@\037\276\250\3214=C\204\203=\202\212\020\274\301,\027>!\243=>\201)\271=WWn\275>F88\355>\326<qX*\274\323M\343=o\275\300\271Q\276?\276\027f\025\276\324\367\007\275\177\3606=\0005\006>\271\252\315;8\016/\276,\326\035>/\342\226\274\231\200l\275A\213a=\r0\026\276\225\312+>\257d#:q\264\000\276dI\027\276H\234\026\276\226 \016>\007\032\276\275\026Jw=\211]3\275\277l\273=\206\345\230=\372\327\243\275\035x\223\273\002M\010>\201XR\274\3047.\276\266\034\016\276\244\035z=l\250\017>(u\031=K\r\002=\210u\346=\034\334\362\275\203_\'\276\363\374A\276<\266H\275\276>@>\201\234\233\274\215\344\346\273J\242\242\275\243k\321\275\025C\267;\206\377f=\n\266\201=e+O\275\216A\325=x\002\267;\333\374\242=\252\223\023\276+\253(>\013\250\301\275\0009\373=\322B\266=\351\307\202\274\337\"(>\037\353\274\274\234M\">\257\260*><\243\033\276\373\2760>\010&\030>\342\341(>h\023)>\227\357\377\275Q\260\025\276\226NM=\276\226A>\331\354\220=\241\252\371\275\371z;\275JL\313=\230\010:>\313;\263\275\246\341\262=\346\033*\276|/?\276m?)\276\330\271\020>\006\244-\276=g\216\275lwM\275\242\013\370\275F\234\345=t\\\022=P\004+>\002!\031>\367\240\021>\321\324.=v\373#<&\\\017\276Z\365\300\273\331\2648\276uU#\276\246\207\014>\357a\036\2763}\266\274Wpy=\350/%>3\265a\275\310\372\321\275.\330$>\021\257+\276b\364\026=Y\224\010>\227\255;>\301\003\217\275\231\0337>\270\207\'\276{\221\017\276\357\315&\276\224\376\t>\260\234\276=\270\221<\276\232\207\007\276\277\377\313\274\216T\222=&]\252<\022q\374=G\221\222=\210\354\"\276\336\203\030>\342\225(>\037\005\025\276h\254$>A\323*\276\374x\036\275Z0\005>7hS\275\"\350\'\276=\t\254<k\251\376\275\260\340\231\275\020{\261\274x\272\375=\240\357\214=O\364K=Vh\002=f\242u\275?+\347\273\326@*>7\230!\275\013\373\246\273\261k\242=\026\346\353\273\027h\002\274\217|\327\275\316U&\276^\317.\276B\255\016>\010\\\226=\210m\034>\231\265\300\275\302g\223=%\357\240=\305\017\357=\316\005%>\347\203\002\274\255P\030>\360\2744\276\256\r\032=\2440\223\275\227P\014><\244\252\274\204M\307=\t\212!<e\371\214\275b>\337=\035\346Q\275\220b\230=\352\362\216= \2029=;_\213;\255\212\022>t\270\013>)7\370=\233S\370\274 \356.\276\036\227\212=\222\304\247<\304\330B\274pL\031\276\312_*\276\327<;>\303\245Q\275=\313Y=\352k >y\261\211\275\322\213A\276OQm\2743\340+>\266\037\207=?\007\242\275\377\243\334=\314\'\310;\362\005\341\275\305\000\360\275\252\356x\274\252N\370\275\253S\221\275K\035\276\275_n\036>3\037)>\342\267\026\276\377J\017>\331\347\020>\337?\037\276\350r\331=5/\020>R\223@\276<+3>sU\035=\261\n\357=\263u#\276\364!8>L\025m<\240\244%\274\346a\277\275\237\2735\274\365\310\026>\307\017\251=b\223\213=T\025#>\303\017\025\276Z\002\027>\000^A>\260\375\271=^\324\312\273\364\254E\275o\332\321=u\360<\276m\343E<\346\217\275=\211\260\030=\217\325\342\2752\010\216\275V*+\275\027\346(>\02387>\305\'/\276\237\353\000\276y\"\031\276b\237&\276\266n\005=\205\321\036>\263m\241<\301*\002\275*\337\014\276^\032\276=\tW-\276.\305\207=~\322F\275g\0028\276\356\224\367<\224\217\317=\275H\350=U\250\361\275\266\313\'\275\345\177\212=\220Q\021\276\000\000.>\330\301\361\273|M\377=a\032\003>\224\240\236\275x\356r\275\350q*>\353\207!\276E\030\006>v%\344\2739I\307<\032\n\030>\370\321\356=\305\360\374\275\000Nz=\266A\237=\267g\257\274\313`\312\275\037\2122>\357\237\205=\324\236\030>\376\267!\274\215\317=>\211\3107>\357\"\225=\207\230\315<\305w\236=\310B\032\275f\021R\275\322Ed=m\357\246\275\024\374=\276\237\273\013=\270\177\r\274\364\201c=\300\253\240\275\365\365\005\275\350\351\256\275\310\355\300\275\237g\034=\333\316\375\275\303\007\232=6\3445>\241\273@>\226!=>\264G\030>\265\223\276\275#\336\006\276\267bA\276J\022\276\274Z\217\265\271\313\225\314=D\321\361\274\302\336\250\275\303\3366\276\346\tl=S\300\366<\t1\001\276v\304\n>\255\270\t>\301\220\027>\330\242\n\276\276\361\245\275PE\317\274\230\003\212\275o7\300\275\003\212\212=>\006\010<\326\262\357=\223\232\n>\224}?<\356\226\355\275$\215->\235`\032\27666\253\275\323\277\325=+\3138=%,\367\275\217\312\032>\255mV\275\033\264\235<\357\271i<\227 \266=J\0218\2739\373\343\274\252\231W=\366\342\315=\253\350\202\275t\364\271\275\347\200\001\276>\010\n>\342Z\025>\000\020\364\275hR\r=\305\357B\275\266,\257=\244u\363\275\020\304\'\276\347%P<O\356\271=\000q\014\276\234P\001\275w\316\023\276S\300\201\275\240z;\276\356\013\324\275\n\325\037\274Nr-\276\210W\335=\247!\025>2\373\344=v\2779>\035\204\235=\370B\202\2757o+=.7\237\275\237\355\352\275\312#\271=\376\222\t\275\007>R\275\300\200\315\275\316L\">w\201\031>\247\024\224\275\271\255\200\275\267\305\300=g\237\265=\377B\254\273\275C\203=h\367\323\275\221\202r\275\016\034}=|R\010>\305\310\036\276\344@\303\275\177#\205;\226\"\020\276\267\"u\2747\344\245\275\024\327\035>fZ\373=3\322.>E\225\231=A\235.\276\200d!>\264\365\242\275\203\010\314\275\tp/>UQ\n\276?_\020\275@v+>\351lX\275\355x\326=\370\000\233=\374\254\374=\346\240\202\275\210\354\033=\322h\324=\037:\034\276\221Q7\276\342\034?\276\340\374\016\276lQ\365=\245\327\n\276\311\020-\276\225\n\220\275;-\031\275\343\216\365\274\345\236\342\274\331\270\335\275\367\204\033>\215\333\265\275\016\023\000>D\353\206=J\326H\275I\247\035=d7\006>C\310\026>V\331\003>T\304\205\275\245L\370\275\254AA\276?\224\366\275.\307\311\275\261\n>>#\376\345\274m\312\300=d\270\014\276\274\361h\274\274\013\306\275\337\013\225\275\030\006%>\3237\254=\225\212\225\2745\306B\275\367\204\273<\031\204\321=\206\374\272\275\025z!>\275\332@\276\026$\372=YH\227\275&\374<\276\215aa=8\256%\276\023^\023>\\+\256\275\337\217\n\276\306O\277\275]\004\363\275\301i\310<\210\365?>\270\t&\276\347[\274\275R7\301=\206\314\013>!\355\006>\332F\212\275}\\\'>\267[\357=\222\0338\276Z\351X\275\205\007 >\355\000H\275\367$\327\275\272[\240=\366%#\276-E,<vM\023>\247\0213>y\\,\276\003\233\235\275Pm$<:00\276\251V1\276\226\310\030\276e*?\276G\202B=\275kw;J\366\327\272\370\023P=[\243$>\265X\326=\345\331\301\2759\337\251=3\307\304=\321\313\026>\370\000\037>\'\307\'=F2\266=Xd\030\276A\226\305\274\372\323I\274\013\334\243<\177\036\331=\302u^\275\336\357\017\276\321\250\023\276\3145\023\275_\254\240=\302\273\363\274\246\267\007=\317t\273=\356\035\302=\366m\035><\241@\276/\322\373\275?\326*=\301){=X\261-\276\222\211\035=\305\234i\275\244\204\254=I<\021\276\037\362\336=\032<9\276\237@ \276\307/Y\275\270|4>vV\361=\036F\312\275\363\256\005\275c\316\010\276\312\263\005\276\246V\325=\251v2\276\005U\001>4^$>\336\334\360<v\021\216\275X16\276\276\r\257\275\021H7\276\326\207\222\275#\211\005>el\221\275\243\r\334=<\366d<S\270\362\273\326\276\274\275\263\3478>\323\363+>\313\020\262\275\324\306\025>s\313<\276\315\010\273\275\326Fp<\020\035\033>\333\225:\276\000\246 \275\023\276\026:\2516w\275\002\375\t>N\241\254=\207\264<\276\177\344\"\276\320\237\'\276\205~\333=\014\016\220\275(IA>T\212\000\276,\370\355\275S$\377;\344\326\021\276\341T:\276\233\3532>\347 \332=\037M\">\222\265-\276\334\212W\274\016\324@\276\003l(\275\300\"\017\276\2147%>p\217\002>f\025\352<\013}\227\275F)\342\275\314\350\'\276\264\353\374=\374\314\262=\274\240\236<\305\001&\276i\\\345<4\323b<\242\341\332\275\003\326\231;>\341\344<+h\">&\202\332=\251\322\217\275P\256@>\333\356$>\356\352\244<I\001->\270c\270\274K6\364=\300\351\372\275\316Hj\275\023^\272\275r\376\025\276\343\254H=\365H\235\275n\254,>\002\r\026>\231\201>>Z\017\255\2757\351\177\275%\242Z\275\3435\376\275\365\262\366\274@\345\024>\364\305\000\276\rR9\276^\317*>@=\223\275c\t\246\275\'%\002\276\013\361F=;7\014\275G\016\263=s\2504\276C\021\'=GQ\251\275fD|\274e8\t\276y\224\034>,^\253=b9\330\275B@\315\275Y\302\034>\347~\000>\350\333\307\275\014\310\207\275\t\226,>Z.\310\275\030\372=>S\377.>\301=\034>Iz\034>\307\346\005\276\351\213\300=\r:\005>)\374\013=\215+\273<\357\037\331\275\262\225->%\336\002>\033w>\276Fn\233\275\272GX=\345P+>?\027<\276\010\325\251=\351\346\345<W\344A\276J50>\033\002@\275\210W\030\276\224\374\372\273(\204e\275x]\004\276u\214\022>k\234\347\275Ui\272==\010\033>\214\255\364\274\376\330\302\274\036\tP;\210\3603>\333\365\355<\206e\351=F\255|<\032\231x:Z\251\347\275\226\034\305=I\020D<w\231\347\274\0306\223=\372u\206=\371\0251>.B\010;1\351\'>rq\324\274\"M\305<\326\362\232\275\255\254\351\275\372\300=\276N\361\321\275M\027\312=$\306\274=\005{)>\370\356\273\275+\200.=\\-$=\345~\021\276/Z\024>!\241\337=P\314\337=\314\260-\275\004(\363;^\277\350<\366\0310\276\341\355d\275\260\002\035\276+\3132\276\212\301\374=|\021A>I F<7M\303=.\214\027\275\217\351\310=\244\316\333\274|Y\022=\253\223\r\276\262\373w\274\326$\006>-\037\260:\362\376$>hG\375;\"|%=@t\207=\030\351\343\275\317F\314=T\252+\276&\000\256=\264\206\017\276\261\212\342\275i\022(\276\354\324\026=\217\363\026>\243\370\002\276c\366\311\275e\025\024\276\'E=>_\351\010\276\330g_\275\270\r\020>k\320\377\274\035\"\231<3 \">\3067\346\275\336\362\277\274NH*=7c\265=mm\355\274\227)\013>m1#>P\036N=sn\201=\236\362 \276ro\022\2764e\013=\306\020\t>=\215W=\3274\356\275\217\037\370=QS\272=y`\261\275\265\311\334\274\251\027>>\373xQ=\370\206\004\276u6\032\276\320\336\014>\232d\331\275\322\025\032\276.-8\275\002\337#>\010N(\276\252\260\032\276\020\203\002\276\253\374\324<.\361&\276\'\240%\276}\034\244=\260\037\317<\212m\020\275\333\375\257\275[\237n\275-\204\322\274\t\013==\271\261\300\273\247z\022\273s\257\301\275\007![\275?\234\'=\325F*\276*~C\275\343\250,\276D\345\270\275\235}\000>\377\213?>\241\215\353\275\224Y\342<X\006R\275\236\226\330\274\357\322\037\276\036P3>\024\373\214<\341\r\t>|ou=\356\222\320\273u8\272\2751\336\010>\022E\255<\363ev=\004h\326<\302\233\260\275\364\306\275\275X\356\014\276\022\274\221\275\3335\331\2752\026\002\275)\334\350=`)\305=\004\2358<\353\036\005>\264/\014\276\372\300o\275\351\355_\275U\016\024>3\367\206\275\255$\233<\235\025\221\275\200C&>\277\327%\276\253\350\003\2769\341\233\275\"-\362=\325\263\023=Pj\320\275\2731\220\275\214\205\243\275<\275\303\273@\236\274\272\346\376\265=\324\207\211\275\007_\310=\207\315$\276\351E\325\275\273Y}\275k\234g\275\023\266\264\275\340\001\024\276gf\264\274r8\031\275\323\271\213=\236\024\226\274\224\367\347=M\313\214<E\321>>\003\354\352=V\177\207<\177\320\323\275\336\r\240;\307\324\024>!\243\261=\231\000\177=\333\247j<\014\004%>\207c\221<\364H\232\275R\354\004\276\000\234\235\275\304\006\341\275\n\007H\275=j\356:\365\326\220\274vD%>\216\266\347=\301<\332\275\360\250\362<\331\013\330=\226\260\216\274\017\333\001\276\023`\013>\331\313>\272\3768\256=S\326\252\274\321\350\354\2754h>\276k\326\226=b\014\337\274\236%\273=\002n\240=,\244\020\276\\\370Y\275P\010>>=M\262=U\361 =tV\242=\201\365U<\266\227\207=\006\033O=\352\037\213\275e\206.=\304\332\373=A*+\276+\217@\276}\005\232=\250\304\277<`J\014>Sw\253\275\217\006\034\276@\327<\276\316)\242\275\230}\256\274z\307@\276\252v\326\2744 {=\261H\007\276:D$>4\372\371=\177\200*>\327kZ\275L\244\236\274\007\302\304\275+u6\276\243\374>\276\t<\330=\362\360\343\274\331U\326=\210\344\246\275\017C\351\275\377`5\276\306\004\014>5\3305\276\024\357\000\276[\"\306\275mj\023\276\260[6=*\205&>.\323\244=\325-\346=\331\021)\275=\n\230=\264y\216=\243\021\027>\341U\364=q\2265\276m\230\013>\236\2601>\352\022L=\227\327\273=}1\224;\235\266\324\273\221\374\002>|\260\013\276\324o\241\274\347`\017\2762\270\021>\223\2250>\307\3029\276\005*\017>o\357\213=\036X.\275Hw%\276\344L-\276?\224M\274*\264\033\276\'\333b\274,\035\\\275\024\233\276\275\344\266O=v\226\242=Q\023\354\275\2277<=\300SO=\002\016g=\204*\221\2751\037\010>\377\0167>n\2701\276^\357\311=\221\373\017>\336\247\211\275Y\033\215\275\242\034\023=;\224<>\210\377\271=*7\'>\370\226\220=\370\330\262\275\237\345\352\274\005\005\310=$\3507>CZ\210\275\342\224*>\203W\362=\371\244\024>\353?$>\316Y\246=\004\247)>\232R\336=B\224N=G\3643>\341\305!>\357\3477\276\312\304\367\275\304F\021<\321\020\270\275\314\332\233\275\310\305\367=o\343\003>=R9\276\303$)=\217\3460\276\343\336\372=\336\016B\276\235\204\310=\254\234\007>J\275\331<\301\200\337<\242+\302\275[\355\036\276\366Q\033\275[}\336=\250\004\024\275\274\003\037\276g\034\263=\271Tu\275ep\365=W\237\327=M\357\032>AZ\265<\313\222\261\275\223\220%>x\222\005=6\325\207\275\021\213\026>\240\337\'>\312\311)>P5\230\275[\214\";\200\320\270\274\367\203\267\275\352m5\276\3715?\276\037\3642=\245\262\026\276\207G\307\2750\2342>\222\013\213=\017\342\'\276\025\244\361=>\360\202\274\007c7\276\023\357Z=\031\353\366\2755\320\267\275r\232#>\310_\263:!\256\324\273\267\352\340<?;<\276rn->!\241\261=\\\017\032>\317\023\306=\207\207\364\275\213$\224=\201\004\276=\003G\020\276|\0376\276\303H\036\276\324\260\004>5\215o\275hI\316=e7\017\276 \236e=\230\030\350=\360\205\014>\336\024-\275\271\000\001>\277V\351=\201^9\276\251zc:\2458\350\275\236\315\361=\343\345?\276N\031\312\275S\001\344<H\002)=\324\033\374=-X\316\275h\022#>3o\026>y\322\350=\303\232\'\276pW@\275\304\276\032>\375\250\n=\373E\037>\331\0036\276L\341\006>\352\357\315=\271l\277<\323e\246=\225:\362\275\220\330 \276,\222\016>\020d\017\276[K!\276]\251\305=S\216Q=\002\024\r\275E\334\326\275,\024-\276S\350\016=\014b\273\275\367\033\036\275\254b\352\275\247\353*>ji&=\245\372\327=I\230\231\274\267\360\261\275\313F\030\276\202\205\373\274R\204\226\275\262a\304\274|\020\277<\316\307\346\275\374\3543\276f\332\313\275\353\311\227=\370\205\365<\246\2141>\260\314\023\275\240\326\271\275#\212\267\275M\363\341\275\217\202E\275\246\006\217\273Z\232\027=\035\253\271\274\235\372\254=\023d\225=\037F\010\276>\276\t>A\031l=M\033\225\275\342\202)>\355\362c\275\233\357{\275cl\005\276N\003\373=\260\370\211\275:`\257\274\312\207\271\275\314\024\032\275\205\013\353\275\231r\311=J\027->\345\037{9-\312\347\275\035\364\323<\036\206\022\276,\022A\276\207\202\001\275\001\353s=D\243\030>\"\231 \276]\200\274=@\0337\276\343Z\346=\315m\031\276\"\255+\274\332\310;>\263\3477\276\323m\034>W\226!\276\321`\321\275,2\207\275\377\213\r\276\351\240\343\274Ra\021\275P\213\254=\352\213.>\007\303\320\275jX\270=\355\2317>b\033*\275n,(>z\3509>\373\027\307=\216o;>\207\374$\276K\2653\2762\221\314=%\265;\276w\310\034\276\377\n\304<%\244C=\243\300\211\275"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "/\000\000\000/\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.252645581961
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.252645581961
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 38
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 47
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 48
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/Mul"
  op: "Mul"
  input: "linear_regression/mean_squared_error_regressor/sub"
  input: "linear_regression/mean_squared_error_regressor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/range/start"
  input: "linear_regression/mean_squared_error_regressor/Rank"
  input: "linear_regression/mean_squared_error_regressor/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/Mean"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/Mul"
  input: "linear_regression/mean_squared_error_regressor/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  input: "ScalarSummary"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range"
  input: "linear_regression/mean_squared_error_regressor/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/truediv"
  input: "linear_regression/mean_squared_error_regressor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/mul_1"
  op: "Mul"
  input: "linear_regression/mean_squared_error_regressor/sub"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/Mul_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Sum"
  op: "Sum"
  input: "gradients/AddN"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/Rank"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/sub"
  op: "Sub"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/sub"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Reshape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Reshape_1"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/Rank"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/sub"
  op: "Sub"
  input: "gradients/fully_connected_1/BiasAdd_grad/Rank"
  input: "gradients/fully_connected_1/BiasAdd_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/range"
  op: "Range"
  input: "gradients/fully_connected_1/BiasAdd_grad/range/start"
  input: "gradients/fully_connected_1/BiasAdd_grad/sub"
  input: "gradients/fully_connected_1/BiasAdd_grad/range/delta"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/Rank"
  op: "Rank"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/sub"
  op: "Sub"
  input: "gradients/fully_connected/BiasAdd_grad/Rank"
  input: "gradients/fully_connected/BiasAdd_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/range"
  op: "Range"
  input: "gradients/fully_connected/BiasAdd_grad/range/start"
  input: "gradients/fully_connected/BiasAdd_grad/sub"
  input: "gradients/fully_connected/BiasAdd_grad/range/delta"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/Sum"
  op: "Sum"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "gradients/fully_connected/BiasAdd_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/mul"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/Sum"
  input: "gradients/fully_connected/BiasAdd_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank_1"
  op: "Rank"
  input: "global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range_1"
  op: "Range"
  input: "global_norm/range_1/start"
  input: "global_norm/Rank_1"
  input: "global_norm/range_1/delta"
}
node {
  name: "global_norm/Sum_1"
  op: "Sum"
  input: "global_norm/mul_1"
  input: "global_norm/range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank_2"
  op: "Rank"
  input: "global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range_2"
  op: "Range"
  input: "global_norm/range_2/start"
  input: "global_norm/Rank_2"
  input: "global_norm/range_2/delta"
}
node {
  name: "global_norm/Sum_2"
  op: "Sum"
  input: "global_norm/mul_2"
  input: "global_norm/range_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/Sum"
  input: "gradients/fully_connected_1/BiasAdd_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank_3"
  op: "Rank"
  input: "global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range_3/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range_3/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range_3"
  op: "Range"
  input: "global_norm/range_3/start"
  input: "global_norm/Rank_3"
  input: "global_norm/range_3/delta"
}
node {
  name: "global_norm/Sum_3"
  op: "Sum"
  input: "global_norm/mul_3"
  input: "global_norm/range_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/mul_4"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank_4"
  op: "Rank"
  input: "global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range_4/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range_4/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range_4"
  op: "Range"
  input: "global_norm/range_4/start"
  input: "global_norm/Rank_4"
  input: "global_norm/range_4/delta"
}
node {
  name: "global_norm/Sum_4"
  op: "Sum"
  input: "global_norm/mul_4"
  input: "global_norm/range_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank_5"
  op: "Rank"
  input: "global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range_5/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range_5/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range_5"
  op: "Range"
  input: "global_norm/range_5/start"
  input: "global_norm/Rank_5"
  input: "global_norm/range_5/delta"
}
node {
  name: "global_norm/Sum_5"
  op: "Sum"
  input: "global_norm/mul_5"
  input: "global_norm/range_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/Sum"
  input: "global_norm/Sum_1"
  input: "global_norm/Sum_2"
  input: "global_norm/Sum_3"
  input: "global_norm/Sum_4"
  input: "global_norm/Sum_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank_6"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range_6/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range_6/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range_6"
  op: "Range"
  input: "global_norm/range_6/start"
  input: "global_norm/Rank_6"
  input: "global_norm/range_6/delta"
}
node {
  name: "global_norm/Sum_6"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/Sum_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/Sum"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/Sum"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/Sum"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
          dim {
            size: 120
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
          dim {
            size: 120
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 47
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 47
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^train"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
}
versions {
  producer: 8
}
